{"version":3,"sources":["../src/index.ts","../src/events.ts","../src/MapPlugin.ts","../src/components/MapComponent.ts","../src/constants.ts","../src/utils.ts","../src/components/MapCloseButton.ts","../src/components/AbstractMapButton.ts","../src/components/MapCompassButton.ts","../src/components/MapMaximizeButton.ts","../src/components/MapResetButton.ts","../src/components/MapZoomToolbar.ts"],"sourcesContent":["import { DEFAULTS } from '@photo-sphere-viewer/core';\nimport * as events from './events';\n\nDEFAULTS.lang['map'] = 'Map';\nDEFAULTS.lang['mapMaximize'] = 'Maximize';\nDEFAULTS.lang['mapMinimize'] = 'Minimize';\nDEFAULTS.lang['mapReset'] = 'Reset';\n\nexport { MapPlugin } from './MapPlugin';\nexport * from './model';\nexport { events };\n\n/** @internal  */\nimport './style.scss';\n","import { TypedEvent } from '@photo-sphere-viewer/core';\nimport type { MapPlugin } from './MapPlugin';\n\n/**\n * Triggered when the user clicks on a hotspot\n */\nexport class SelectHotspot extends TypedEvent<MapPlugin> {\n    static override readonly type = 'select-hotspot';\n    override type: 'select-hotspot';\n\n    constructor(public readonly hotspotId: string) {\n        super(SelectHotspot.type);\n    }\n}\n\nexport type MapPluginEvents = SelectHotspot;\n","import { AbstractConfigurablePlugin, events, Point, utils, Viewer } from '@photo-sphere-viewer/core';\nimport type { events as markersEvents, Marker, MarkersPlugin } from '@photo-sphere-viewer/markers-plugin';\nimport { MapComponent } from './components/MapComponent';\nimport { HOTSPOT_GENERATED_ID, HOTSPOT_MARKER_ID, MARKER_DATA_KEY } from './constants';\nimport { MapPluginEvents } from './events';\nimport overlay from './overlay.svg';\nimport pin from './icons/pin.svg';\nimport { MapHotspot, MapPluginConfig, ParsedMapPluginConfig, UpdatableMapPluginConfig } from './model';\n\nconst getConfig = utils.getConfigParser<MapPluginConfig, ParsedMapPluginConfig>(\n    {\n        imageUrl: null,\n        center: null,\n        rotation: 0,\n        size: '200px',\n        position: ['bottom', 'left'],\n        visibleOnLoad: true,\n        overlayImage: overlay,\n        compassImage: null,\n        pinImage: pin,\n        pinSize: 35,\n        spotColor: 'white',\n        spotImage: null,\n        spotSize: 15,\n        static: false,\n        defaultZoom: 100,\n        minZoom: 20,\n        maxZoom: 200,\n        hotspots: [],\n    },\n    {\n        overlayImage: (overlayImage, { rawConfig }) => {\n            if (rawConfig.compassImage) {\n                utils.logWarn('map: \"compassImage\" is deprecated, use \"overlayImage\" instead');\n                return rawConfig.compassImage;\n            }\n            return overlayImage;\n        },\n        position: (position, { defValue }) => {\n            return utils.cleanCssPosition(position, { allowCenter: false, cssOrder: true }) || defValue;\n        },\n        rotation: (rotation) => utils.parseAngle(rotation),\n        defaultZoom: (defaultZoom) => Math.log(defaultZoom / 100),\n        maxZoom: (maxZoom) => Math.log(maxZoom / 100),\n        minZoom: (minZoom) => Math.log(minZoom / 100),\n    }\n);\n\n/**\n * Adds a minimap on the viewer\n */\nexport class MapPlugin extends AbstractConfigurablePlugin<\n    MapPluginConfig,\n    ParsedMapPluginConfig,\n    UpdatableMapPluginConfig,\n    MapPluginEvents\n> {\n    static override readonly id = 'map';\n    static override readonly configParser = getConfig;\n    static override readonly readonlyOptions: Array<keyof MapPluginConfig> = [\n        'imageUrl',\n        'center',\n        'visibleOnLoad',\n        'hotspots',\n        'defaultZoom',\n    ];\n\n    private markers?: MarkersPlugin;\n    readonly component: MapComponent;\n\n    constructor(viewer: Viewer, config: MapPluginConfig) {\n        super(viewer, config);\n\n        this.component = new MapComponent(this.viewer, this);\n    }\n\n    /**\n     * @internal\n     */\n    override init() {\n        super.init();\n\n        this.markers = this.viewer.getPlugin('markers');\n\n        this.viewer.addEventListener(events.PositionUpdatedEvent.type, this);\n        this.viewer.addEventListener(events.SizeUpdatedEvent.type, this);\n        this.viewer.addEventListener(events.ReadyEvent.type, this, { once: true });\n\n        this.setHotspots(this.config.hotspots, false);\n\n        if (this.markers) {\n            this.markers.addEventListener('set-markers', this);\n        }\n    }\n\n    /**\n     * @internal\n     */\n    override destroy() {\n        this.viewer.removeEventListener(events.PositionUpdatedEvent.type, this);\n        this.viewer.removeEventListener(events.SizeUpdatedEvent.type, this);\n        this.viewer.removeEventListener(events.ReadyEvent.type, this);\n\n        if (this.markers) {\n            this.markers.removeEventListener('set-markers', this);\n        }\n\n        this.component.destroy();\n\n        delete this.markers;\n\n        super.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        switch (e.type) {\n            case events.ReadyEvent.type:\n                this.component.reload(this.config.imageUrl);\n                break;\n            case events.PositionUpdatedEvent.type:\n                this.component.update();\n                break;\n            case events.SizeUpdatedEvent.type:\n                if (this.component.maximized) {\n                    this.component.update();\n                }\n                break;\n            case 'set-markers':\n                this.component.setMarkers(this.__markersToHotspots((e as markersEvents.SetMarkersEvent).markers));\n                break;\n            default:\n                break;\n        }\n    }\n\n    override setOptions(options: Partial<UpdatableMapPluginConfig>) {\n        super.setOptions(options);\n        this.component.applyConfig();\n    }\n\n    /**\n     * Hides the map\n     */\n    hide() {\n        this.component.hide();\n    }\n\n    /**\n     * Shows the map\n     */\n    show() {\n        this.component.show();\n    }\n\n    /**\n     * Closes the map\n     */\n    close() {\n        if (!this.component.collapsed) {\n            this.component.toggleCollapse();\n        }\n    }\n\n    /**\n     * Open the map\n     */\n    open() {\n        if (this.component.collapsed) {\n            this.component.toggleCollapse();\n        }\n    }\n\n    /**\n     * Minimizes the map\n     */\n    minimize() {\n        if (this.component.maximized) {\n            this.component.toggleMaximized();\n        }\n    }\n\n    /**\n     * Maximizes the map\n     */\n    maximize() {\n        if (!this.component.maximized) {\n            this.component.toggleMaximized();\n        }\n    }\n\n    /**\n     * Changes the image of the map\n     * @param rotation Also change the image rotation\n     * @param center Also change the position on the map\n     */\n    setImage(url: string, center?: Point, rotation?: string | number) {\n        if (!utils.isNil(rotation)) {\n            this.config.rotation = utils.parseAngle(rotation);\n        }\n        if (!utils.isNil(center)) {\n            this.config.center = center;\n        }\n        this.component.reload(url);\n    }\n\n    /**\n     * Changes the position on the map\n     */\n    setCenter(center: Point) {\n        this.config.center = center;\n        this.component.recenter();\n    }\n\n    /**\n     * Changes the hotspots on the map\n     */\n    setHotspots(hotspots: MapHotspot[], render = true) {\n        const ids: string[] = [];\n        let i = 1;\n\n        hotspots?.forEach((hotspot) => {\n            if (!hotspot.id) {\n                hotspot.id = HOTSPOT_GENERATED_ID + i++;\n            } else if (ids.includes(hotspot.id)) {\n                utils.logWarn(`Duplicated hotspot id \"${hotspot.id}`);\n            } else {\n                ids.push(hotspot.id);\n            }\n        });\n\n        this.config.hotspots = hotspots || [];\n\n        if (render) {\n            this.component.update();\n        }\n    }\n\n    /**\n     * Removes all hotspots\n     */\n    clearHotspots() {\n        this.setHotspots(null);\n    }\n\n    private __markersToHotspots(markers: Marker[]): MapHotspot[] {\n        return markers\n            .filter((marker) => marker.data?.[MARKER_DATA_KEY])\n            .map((marker) => {\n                const markerData: MapHotspot = marker.data[MARKER_DATA_KEY];\n\n                const hotspot: MapHotspot = {\n                    ...markerData,\n                    id: HOTSPOT_MARKER_ID + marker.id,\n                    tooltip: marker.config.tooltip?.content,\n                };\n\n                if ('distance' in markerData) {\n                    (hotspot as any).yaw = marker.state.position.yaw;\n                } else if (!('x' in markerData) || !('y' in markerData)) {\n                    utils.logWarn(`Marker ${marker.id} \"map\" data is missing position (distance or x+y)`);\n                    return null;\n                }\n\n                return hotspot;\n            })\n            .filter((h) => h);\n    }\n}\n","import type { Point, Tooltip, Viewer } from '@photo-sphere-viewer/core';\nimport { AbstractComponent, CONSTANTS, SYSTEM, utils } from '@photo-sphere-viewer/core';\nimport type { MarkersPlugin } from '@photo-sphere-viewer/markers-plugin';\nimport { MathUtils } from 'three';\nimport { HOTSPOT_MARKER_ID, MAP_SHADOW_BLUR, PIN_SHADOW_BLUR, PIN_SHADOW_OFFSET } from '../constants';\nimport { SelectHotspot } from '../events';\nimport type { MapPlugin } from '../MapPlugin';\nimport { MapHotspot } from '../model';\nimport {\n    canvasShadow,\n    drawImageCentered,\n    drawImageHighDpi,\n    getImageHtml,\n    ImageSource,\n    loadImage,\n    projectPoint,\n    unprojectPoint,\n} from '../utils';\nimport { MapCloseButton } from './MapCloseButton';\nimport { MapCompassButton } from './MapCompassButton';\nimport { MapMaximizeButton } from './MapMaximizeButton';\nimport { MapResetButton } from './MapResetButton';\nimport { MapZoomToolbar } from './MapZoomToolbar';\n\nexport class MapComponent extends AbstractComponent {\n    protected override readonly state = {\n        visible: false,\n        maximized: false,\n        collapsed: false,\n\n        imgScale: 1,\n        zoom: this.config.defaultZoom,\n        offset: { x: 0, y: 0 } as Point,\n\n        mouseX: null as number,\n        mouseY: null as number,\n        mousedown: false,\n        pinchDist: 0,\n        pinchAngle: 0,\n\n        hotspotPos: {} as Record<string, Point & { s: number }>,\n        hotspotId: null as string,\n        hotspotTooltip: null as Tooltip,\n        markers: [] as MapHotspot[],\n\n        forceRender: false,\n        needsUpdate: false,\n        renderLoop: null as ReturnType<typeof requestAnimationFrame>,\n\n        images: {} as Record<string, { loading: boolean; value: ImageSource }>,\n    };\n\n    private readonly canvas: HTMLCanvasElement;\n    private readonly overlay: HTMLElement;\n    private readonly resetButton: MapResetButton;\n    private readonly maximizeButton: MapMaximizeButton;\n    private readonly closeButton: MapCloseButton;\n    private readonly compassButton: MapCompassButton;\n    private readonly zoomToolbar: MapZoomToolbar;\n\n    get config() {\n        return this.plugin.config;\n    }\n\n    get maximized() {\n        return this.state.maximized;\n    }\n\n    get collapsed() {\n        return this.state.collapsed;\n    }\n\n    constructor(viewer: Viewer, private plugin: MapPlugin) {\n        super(viewer, {\n            className: `psv-map ${CONSTANTS.CAPTURE_EVENTS_CLASS}`,\n        });\n\n        // map + compass container\n        const canvasContainer = document.createElement('div');\n        canvasContainer.className = 'psv-map__container';\n\n        canvasContainer.addEventListener('mousedown', this);\n        window.addEventListener('mousemove', this);\n        window.addEventListener('mouseup', this);\n        canvasContainer.addEventListener('touchstart', this);\n        window.addEventListener('touchmove', this);\n        window.addEventListener('touchend', this);\n        canvasContainer.addEventListener('wheel', this);\n\n        // map canvas\n        this.canvas = document.createElement('canvas');\n        canvasContainer.appendChild(this.canvas);\n\n        // overlay\n        this.overlay = document.createElement('div');\n        this.overlay.className = 'psv-map__overlay';\n        canvasContainer.appendChild(this.overlay);\n\n        this.container.appendChild(canvasContainer);\n\n        this.container.addEventListener('transitionstart', this);\n        this.container.addEventListener('transitionend', this);\n\n        // sub-components\n        this.resetButton = new MapResetButton(this);\n        this.maximizeButton = new MapMaximizeButton(this);\n        this.closeButton = new MapCloseButton(this);\n        this.compassButton = new MapCompassButton(this);\n        this.zoomToolbar = new MapZoomToolbar(this);\n\n        // render loop\n        const renderLoop = () => {\n            if (this.isVisible() && (this.state.needsUpdate || this.state.forceRender)) {\n                this.render();\n                this.state.needsUpdate = false;\n            }\n            this.state.renderLoop = requestAnimationFrame(renderLoop);\n        };\n        renderLoop();\n\n        this.applyConfig();\n        this.hide();\n\n        if (!this.config.visibleOnLoad) {\n            this.toggleCollapse();\n        }\n    }\n\n    override destroy(): void {\n        window.removeEventListener('touchmove', this);\n        window.removeEventListener('mousemove', this);\n        window.removeEventListener('touchend', this);\n        window.removeEventListener('mouseup', this);\n\n        cancelAnimationFrame(this.state.renderLoop);\n\n        super.destroy();\n    }\n\n    handleEvent(e: Event) {\n        if (utils.getClosest(e.target as HTMLElement, `.${CONSTANTS.CAPTURE_EVENTS_CLASS}:not(.psv-map)`)) {\n            return;\n        }\n        switch (e.type) {\n            case 'mousedown': {\n                const event = e as MouseEvent;\n                this.state.mouseX = event.clientX;\n                this.state.mouseY = event.clientY;\n                this.state.mousedown = true;\n                e.stopPropagation();\n                break;\n            }\n            case 'touchstart': {\n                const event = e as TouchEvent;\n                if (event.touches.length === 1) {\n                    this.state.mouseX = event.touches[0].clientX;\n                    this.state.mouseY = event.touches[0].clientY;\n                    this.state.mousedown = true;\n                } else if (event.touches.length === 2) {\n                    ({\n                        distance: this.state.pinchDist,\n                        angle: this.state.pinchAngle,\n                        center: { x: this.state.mouseX, y: this.state.mouseY },\n                    } = utils.getTouchData(event));\n                }\n                e.stopPropagation();\n                e.preventDefault();\n                break;\n            }\n            case 'mousemove': {\n                const event = e as MouseEvent;\n                if (this.state.mousedown) {\n                    this.__move(event.clientX, event.clientY);\n                    e.stopPropagation();\n                } else {\n                    this.__handleHotspots(event.clientX, event.clientY);\n                }\n                break;\n            }\n            case 'touchmove': {\n                const event = e as TouchEvent;\n                if (this.state.mousedown && event.touches.length === 1) {\n                    this.__move(event.touches[0].clientX, event.touches[0].clientY);\n                    e.stopPropagation();\n                } else if (this.state.mousedown && event.touches.length === 2) {\n                    const touchData = utils.getTouchData(event);\n                    const delta = (touchData.distance - this.state.pinchDist) / SYSTEM.pixelRatio;\n\n                    this.zoom(delta / 100);\n                    this.__move(touchData.center.x, touchData.center.y);\n\n                    if (this.state.maximized && !this.config.static) {\n                        this.viewer.dynamics.position.step({ yaw: this.state.pinchAngle - touchData.angle }, 0);\n                    }\n\n                    ({ distance: this.state.pinchDist, angle: this.state.pinchAngle } = touchData);\n                    e.stopPropagation();\n                }\n                break;\n            }\n            case 'mouseup':\n            case 'touchend': {\n                const mouse = (e as TouchEvent).changedTouches?.[0] || (e as MouseEvent);\n                if (this.state.mousedown) {\n                    this.state.mousedown = false;\n                    e.stopPropagation();\n                }\n                this.__clickHotspot(mouse.clientX, mouse.clientY);\n                break;\n            }\n            case 'wheel': {\n                const event = e as WheelEvent;\n                const delta = event.deltaY / Math.abs(event.deltaY);\n                this.zoom(-delta / 10);\n                e.stopPropagation();\n                e.preventDefault();\n                break;\n            }\n            case 'transitionstart':\n                this.state.forceRender = true;\n                break;\n            case 'transitionend':\n                if (!this.state.maximized) {\n                    this.overlay.style.display = '';\n                }\n                this.state.forceRender = false;\n                this.update();\n                break;\n        }\n    }\n\n    applyConfig() {\n        this.container.classList.remove(\n            'psv-map--top-right',\n            'psv-map--top-left',\n            'psv-map--bottom-right',\n            'psv-map--bottom-left'\n        );\n        this.container.classList.add(`psv-map--${this.config.position.join('-')}`);\n\n        this.container.style.width = this.config.size;\n        this.container.style.height = this.config.size;\n\n        this.overlay.innerHTML = getImageHtml(this.config.overlayImage);\n\n        this.resetButton.applyConfig();\n        this.closeButton.applyConfig();\n        this.compassButton.applyConfig();\n        this.maximizeButton.applyConfig();\n\n        if (this.config.static) {\n            this.compassButton.rotate(0);\n            this.overlay.style.transform = '';\n        }\n\n        this.update();\n    }\n\n    override isVisible(): boolean {\n        return this.state.visible && !this.state.collapsed;\n    }\n\n    override show() {\n        super.show();\n        this.update();\n        if (!this.state.maximized) {\n            this.overlay.style.display = '';\n        }\n    }\n\n    override hide() {\n        super.hide();\n        this.state.forceRender = false;\n    }\n\n    /**\n     * Flag for render\n     */\n    update() {\n        this.state.needsUpdate = true;\n    }\n\n    /**\n     * Load a new map image\n     */\n    reload(url: string) {\n        delete this.state.images[this.config.imageUrl];\n        this.config.imageUrl = url;\n        this.state.imgScale = 1;\n        this.__loadImage(this.config.imageUrl, true);\n        this.recenter();\n    }\n\n    /**\n     * Clears the offset and zoom level\n     */\n    reset() {\n        this.state.zoom = this.config.defaultZoom;\n        this.recenter();\n    }\n\n    /**\n     * Clears the offset\n     */\n    recenter() {\n        this.state.offset.x = 0;\n        this.state.offset.y = 0;\n        this.update();\n    }\n\n    /**\n     * Switch collapsed mode\n     */\n    toggleCollapse() {\n        if (this.state.maximized) {\n            this.toggleMaximized();\n        }\n\n        this.state.collapsed = !this.state.collapsed;\n\n        utils.toggleClass(this.container, 'psv-map--collapsed', this.state.collapsed);\n\n        if (!this.state.collapsed) {\n            this.reset();\n        }\n\n        this.closeButton.update();\n    }\n\n    /**\n     * Switch maximized mode\n     */\n    toggleMaximized() {\n        if (this.state.collapsed) {\n            return;\n        }\n\n        this.state.maximized = !this.state.maximized;\n\n        utils.toggleClass(this.container, 'psv-map--maximized', this.state.maximized);\n\n        if (this.state.maximized) {\n            this.overlay.style.display = 'none';\n        }\n\n        this.maximizeButton.update();\n    }\n\n    /**\n     * Changes the zoom level\n     */\n    zoom(d: number) {\n        this.state.zoom = MathUtils.clamp(this.state.zoom + d, this.config.minZoom, this.config.maxZoom);\n        this.update();\n    }\n\n    /**\n     * Updates the markers\n     */\n    setMarkers(markers: MapHotspot[]) {\n        this.state.markers = markers;\n        this.update();\n    }\n\n    private render() {\n        if (!this.config.center) {\n            return;\n        }\n\n        // load the map image\n        const mapImage = this.__loadImage(this.config.imageUrl);\n        if (!mapImage) {\n            return;\n        }\n\n        // clear hotspots status\n        this.state.hotspotPos = {};\n        this.__resetHotspot();\n\n        const yaw = this.viewer.getPosition().yaw;\n        const zoom = Math.exp(this.state.zoom) / this.state.imgScale;\n        const center: Point = {\n            x: this.config.center.x * this.state.imgScale,\n            y: this.config.center.y * this.state.imgScale,\n        };\n        const offset: Point = {\n            x: this.state.offset.x * this.state.imgScale,\n            y: this.state.offset.y * this.state.imgScale,\n        };\n        const rotation = this.config.rotation;\n        const yawAndRotation = this.config.static ? 0 : yaw + rotation;\n\n        // update UI\n        if (!this.config.static) {\n            this.overlay.style.transform = `rotate(${-yawAndRotation}rad)`;\n            this.compassButton.rotate(yawAndRotation);\n        }\n        this.zoomToolbar.setText(this.state.zoom);\n\n        // clear canvas\n        this.canvas.width = this.container.clientWidth * SYSTEM.pixelRatio;\n        this.canvas.height = this.container.clientHeight * SYSTEM.pixelRatio;\n\n        const canvasPos = utils.getPosition(this.canvas);\n        const canvasW = this.canvas.width;\n        const canvasH = this.canvas.height;\n        const canvasVirtualCenterX = canvasW / 2 / SYSTEM.pixelRatio;\n        const canvasVirtualCenterY = canvasH / 2 / SYSTEM.pixelRatio;\n\n        const context = this.canvas.getContext('2d');\n        context.clearRect(0, 0, canvasW, canvasH);\n\n        // draw the map\n        const mapW = mapImage.width;\n        const mapH = mapImage.height;\n\n        context.save();\n        context.translate(canvasW / 2, canvasH / 2);\n        context.rotate(-yawAndRotation);\n        context.scale(zoom, zoom);\n        canvasShadow(context, 0, 0, MAP_SHADOW_BLUR);\n        // prettier-ignore\n        drawImageHighDpi(\n            context,\n            mapImage,\n            -center.x - offset.x,\n            -center.y - offset.y,\n            mapW,\n            mapH\n        );\n        context.restore();\n\n        // draw the hotspots\n        [...this.config.hotspots, ...this.state.markers].forEach((hotspot: MapHotspot) => {\n            const image = this.__loadImage(hotspot.image || this.config.spotImage);\n\n            const hotspotPos = { ...offset };\n            if ('yaw' in hotspot && 'distance' in hotspot) {\n                const angle = utils.parseAngle(hotspot.yaw) + rotation;\n                hotspotPos.x += Math.sin(-angle) * hotspot.distance * this.state.imgScale;\n                hotspotPos.y += Math.cos(-angle) * hotspot.distance * this.state.imgScale;\n            } else if ('x' in hotspot && 'y' in hotspot) {\n                hotspotPos.x += center.x - hotspot.x * this.state.imgScale;\n                hotspotPos.y += center.y - hotspot.y * this.state.imgScale;\n            } else {\n                utils.logWarn(`Hotspot ${hotspot['id']} is missing position (yaw+distance or x+y)`);\n                return;\n            }\n\n            const spotPos = projectPoint(hotspotPos, yawAndRotation, zoom);\n\n            // TODO filter out not visible\n\n            const x = canvasVirtualCenterX - spotPos.x;\n            const y = canvasVirtualCenterY - spotPos.y;\n            const size = hotspot.size || this.config.spotSize;\n\n            // save absolute position on the viewer\n            this.state.hotspotPos[hotspot.id] = {\n                x: x + canvasPos.x,\n                y: y + canvasPos.y,\n                s: size,\n            };\n\n            context.save();\n            context.translate(x * SYSTEM.pixelRatio, y * SYSTEM.pixelRatio);\n            canvasShadow(context, PIN_SHADOW_OFFSET, PIN_SHADOW_OFFSET, PIN_SHADOW_BLUR);\n            if (image) {\n                drawImageCentered(context, image, size);\n            } else {\n                context.fillStyle = hotspot.color || this.config.spotColor;\n                context.beginPath();\n                context.arc(0, 0, (size * SYSTEM.pixelRatio) / 2, 0, 2 * Math.PI);\n                context.fill();\n            }\n            context.restore();\n        });\n\n        // draw the pin\n        const pinImage = this.__loadImage(this.config.pinImage);\n        if (pinImage) {\n            const pinPos = projectPoint(offset, yawAndRotation, zoom);\n\n            const x = canvasVirtualCenterX - pinPos.x;\n            const y = canvasVirtualCenterY - pinPos.y;\n            const size = this.config.pinSize;\n            const angle = this.config.static ? yaw + rotation : 0;\n\n            context.save();\n            context.translate(x * SYSTEM.pixelRatio, y * SYSTEM.pixelRatio);\n            context.rotate(angle);\n            canvasShadow(context, PIN_SHADOW_OFFSET, PIN_SHADOW_OFFSET, PIN_SHADOW_BLUR);\n            drawImageCentered(context, pinImage, size);\n            context.restore();\n        }\n    }\n\n    /**\n     * Applies mouse movement to the map\n     */\n    private __move(clientX: number, clientY: number) {\n        const yaw = this.viewer.getPosition().yaw;\n        const zoom = Math.exp(this.state.zoom);\n\n        const move = unprojectPoint(\n            {\n                x: this.state.mouseX - clientX,\n                y: this.state.mouseY - clientY,\n            },\n            this.config.static ? 0 : yaw + this.config.rotation,\n            zoom\n        );\n\n        this.state.offset.x += move.x;\n        this.state.offset.y += move.y;\n\n        this.update();\n\n        this.state.mouseX = clientX;\n        this.state.mouseY = clientY;\n    }\n\n    /**\n     * Finds the hotspot under the mouse\n     */\n    private __findHotspot(clientX: number, clientY: number): string {\n        const k = this.config.spotSize / 2;\n\n        let hotspotId: string = null;\n        for (const [id, { x, y }] of Object.entries(this.state.hotspotPos)) {\n            if (clientX > x - k && clientX < x + k && clientY > y - k && clientY < y + k) {\n                hotspotId = id;\n                break;\n            }\n        }\n\n        return hotspotId;\n    }\n\n    /**\n     * Updates current hotspot on mouse move and displays tooltip\n     */\n    private __handleHotspots(clientX: number, clientY: number) {\n        const hotspotId = this.__findHotspot(clientX, clientY);\n\n        if (this.state.hotspotId !== hotspotId) {\n            this.__resetHotspot();\n\n            if (hotspotId) {\n                let tooltip;\n                if (hotspotId.startsWith(HOTSPOT_MARKER_ID)) {\n                    tooltip = this.state.markers.find(({ id }) => id === hotspotId)?.tooltip;\n                } else {\n                    tooltip = this.config.hotspots.find(({ id }) => id === hotspotId)?.tooltip;\n                }\n\n                if (tooltip) {\n                    const hotspotPos = this.state.hotspotPos[hotspotId];\n                    const viewerPos = utils.getPosition(this.viewer.container);\n\n                    this.state.hotspotTooltip = this.viewer.createTooltip({\n                        content: tooltip,\n                        left: hotspotPos.x - viewerPos.x,\n                        top: hotspotPos.y - viewerPos.y,\n                        box: {\n                            width: hotspotPos.s,\n                            height: hotspotPos.s,\n                        },\n                    });\n                }\n            }\n\n            this.state.hotspotId = hotspotId;\n        }\n    }\n\n    /**\n     * Dispatch event when a hotspot is clicked\n     */\n    private __clickHotspot(clientX: number, clientY: number) {\n        const hotspotId = this.__findHotspot(clientX, clientY);\n\n        if (hotspotId) {\n            this.plugin.dispatchEvent(new SelectHotspot(hotspotId));\n\n            if (hotspotId.startsWith(HOTSPOT_MARKER_ID)) {\n                const markerId = hotspotId.substring(HOTSPOT_MARKER_ID.length);\n                this.viewer.getPlugin<MarkersPlugin>('markers').gotoMarker(markerId);\n            }\n\n            if (this.maximized) {\n                this.toggleMaximized();\n            }\n        }\n\n        this.__resetHotspot();\n    }\n\n    private __resetHotspot() {\n        this.state.hotspotTooltip?.hide();\n        this.state.hotspotTooltip = null;\n        this.state.hotspotId = null;\n    }\n\n    private __loadImage(url: string, isInit = false): ImageSource {\n        if (!url) {\n            return null;\n        }\n\n        if (!this.state.images[url]) {\n            const image = loadImage(url);\n\n            this.state.images[url] = {\n                loading: true,\n                value: image,\n            };\n\n            image.onload = () => {\n                if (isInit && Math.max(image.width, image.height) > SYSTEM.maxCanvasWidth) {\n                    this.state.imgScale = SYSTEM.maxCanvasWidth / Math.max(image.width, image.height);\n\n                    const buffer = document.createElement('canvas');\n                    buffer.width = image.width * this.state.imgScale;\n                    buffer.height = image.height * this.state.imgScale;\n\n                    const ctx = buffer.getContext('2d');\n                    ctx.drawImage(image, 0, 0, buffer.width, buffer.height);\n\n                    this.state.images[url].value = buffer;\n                }\n\n                this.state.images[url].loading = false;\n                this.update();\n\n                if (isInit) {\n                    this.show();\n                }\n            };\n\n            return null;\n        }\n\n        if (this.state.images[url].loading) {\n            return null;\n        }\n\n        return this.state.images[url].value;\n    }\n}\n","export const MARKER_DATA_KEY = 'map';\nexport const HOTSPOT_GENERATED_ID = '__generated__';\nexport const HOTSPOT_MARKER_ID = '__marker__';\n\nexport const PIN_SHADOW_OFFSET = 2;\nexport const PIN_SHADOW_BLUR = 4;\nexport const MAP_SHADOW_BLUR = 10;\n","import { Point, SYSTEM } from '@photo-sphere-viewer/core';\n\nexport function loadImage(src: string): HTMLImageElement {\n    const image = document.createElement('img');\n\n    if (!src.includes('<svg')) {\n        image.src = src;\n    } else {\n        // the SVG must have it's own size, use the viewBox if not defined\n        if (!/<svg[^>]*width=\"/.test(src) && src.includes('viewBox')) {\n            const [, , , width, height] = /viewBox=\"([0-9-]+) ([0-9-]+) ([0-9]+) ([0-9]+)\"/.exec(src);\n            src = src.replace('<svg', `<svg width=\"${width}px\" height=\"${height}px\"`);\n        }\n\n        const src64 = `data:image/svg+xml;base64,${window.btoa(src)}`;\n        image.src = src64;\n    }\n\n    return image;\n}\n\nexport function getImageHtml(src: string): string {\n    if (!src) {\n        return '';\n    } else if (!src.includes('<svg')) {\n        return `<img src=\"${src}\">`;\n    } else {\n        return src;\n    }\n}\n\nexport function unprojectPoint(pt: Point, yaw: number, zoom: number): Point {\n    return {\n        x: (Math.cos(yaw) * pt.x - Math.sin(yaw) * pt.y) / zoom,\n        y: (Math.sin(yaw) * pt.x + Math.cos(yaw) * pt.y) / zoom,\n    };\n}\n\nexport function projectPoint(pt: Point, yaw: number, zoom: number): Point {\n    return {\n        x: (Math.cos(-yaw) * pt.x - Math.sin(-yaw) * pt.y) * zoom,\n        y: (Math.sin(-yaw) * pt.x + Math.cos(-yaw) * pt.y) * zoom,\n    };\n}\n\nexport type ImageSource = HTMLImageElement | HTMLCanvasElement;\n\n/**\n * Setup the canvas drop shadow\n */\nexport function canvasShadow(\n    context: CanvasRenderingContext2D,\n    offsetX: number,\n    offsetY: number,\n    blur: number,\n    color = 'black'\n) {\n    context.shadowOffsetX = offsetX * SYSTEM.pixelRatio;\n    context.shadowOffsetY = offsetY * SYSTEM.pixelRatio;\n    context.shadowBlur = blur * SYSTEM.pixelRatio;\n    context.shadowColor = color;\n}\n\n/**\n * Draw an image centered\n */\nexport function drawImageCentered(\n    context: CanvasRenderingContext2D,\n    image: ImageSource,\n    size: number\n) {\n    const w = image.width;\n    const h = image.height;\n\n    // prettier-ignore\n    drawImageHighDpi(\n        context,\n        image,\n        -size / 2,\n        -((h / w) * size) / 2,\n        size,\n        (h / w) * size\n    );\n}\n\n/**\n * Standard \"drawImage\" using devicePixelRatio\n */\nexport function drawImageHighDpi(\n    context: CanvasRenderingContext2D,\n    image: ImageSource,\n    x: number,\n    y: number,\n    w: number,\n    h: number\n) {\n    context.drawImage(\n        image,\n        0, 0,\n        image.width, image.height,\n        x * SYSTEM.pixelRatio, y * SYSTEM.pixelRatio,\n        w * SYSTEM.pixelRatio, h * SYSTEM.pixelRatio\n    );\n}\n","import { CONSTANTS } from '@photo-sphere-viewer/core';\nimport icon from '../icons/map.svg';\nimport { AbstractMapButton, ButtonPosition } from './AbstractMapButton';\nimport type { MapComponent } from './MapComponent';\n\nexport class MapCloseButton extends AbstractMapButton {\n    constructor(map: MapComponent) {\n        super(map, ButtonPosition.DEFAULT);\n\n        this.container.addEventListener('click', (e) => {\n            map.toggleCollapse();\n            e.stopPropagation();\n        });\n    }\n\n    override applyConfig(): void {\n        super.applyConfig();\n        this.container.classList.add('psv-map__button-close');\n    }\n\n    override update() {\n        this.container.innerHTML = this.map.collapsed ? icon : CONSTANTS.ICONS.close;\n        this.container.title = this.map.collapsed ? this.viewer.config.lang['map'] : this.viewer.config.lang.close;\n    }\n}\n","import { AbstractComponent } from '@photo-sphere-viewer/core';\nimport { MapComponent } from './MapComponent';\n\nexport const enum ButtonPosition {\n    DEFAULT,\n    DIAGONAL,\n    HORIZONTAL,\n    VERTICAL,\n}\n\nconst INVERT_POSITIONS: Record<string, string> = {\n    top: 'bottom',\n    bottom: 'top',\n    left: 'right',\n    right: 'left',\n};\n\nfunction getButtonPosition(mapPosition: [string, string], direction: ButtonPosition): [string, string] {\n    switch (direction) {\n        case ButtonPosition.DIAGONAL:\n            return [INVERT_POSITIONS[mapPosition[0]], INVERT_POSITIONS[mapPosition[1]]];\n        case ButtonPosition.HORIZONTAL:\n            return [mapPosition[0], INVERT_POSITIONS[mapPosition[1]]];\n        case ButtonPosition.VERTICAL:\n            return [INVERT_POSITIONS[mapPosition[0]], mapPosition[1]];\n        default:\n            return mapPosition;\n    }\n}\n\nexport abstract class AbstractMapButton extends AbstractComponent {\n    constructor(protected map: MapComponent, private position: ButtonPosition) {\n        super(map, {});\n    }\n\n    applyConfig() {\n        // prettier-ignore\n        this.container.className = `psv-map__button psv-map__button--${getButtonPosition(this.map.config.position, this.position).join('-')}`;\n        this.update();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    update() {}\n}\n","import icon from '../icons/compass.svg';\nimport { AbstractMapButton, ButtonPosition } from './AbstractMapButton';\nimport type { MapComponent } from './MapComponent';\n\nexport class MapCompassButton extends AbstractMapButton {\n    constructor(map: MapComponent) {\n        super(map, ButtonPosition.VERTICAL);\n\n        this.container.innerHTML = icon;\n        this.container.querySelector('svg').style.width = '80%';\n\n        this.container.addEventListener('click', (e) => {\n            this.viewer.dynamics.position.goto({ yaw: -map.config.rotation }, 2);\n            e.stopPropagation();\n        });\n    }\n\n    rotate(angle: number) {\n        this.container.querySelector('svg').style.transform = `rotate3d(0, 0, 1, ${-angle}rad)`;\n    }\n}\n","import maximize from '../icons/maximize.svg';\nimport minimize from '../icons/minimize.svg';\nimport { AbstractMapButton, ButtonPosition } from './AbstractMapButton';\nimport type { MapComponent } from './MapComponent';\n\nconst ROTATION: Record<string, number> = {\n    'bottom-left': 0,\n    'bottom-right': -90,\n    'top-right': 180,\n    'top-left': 90,\n};\n\nexport class MapMaximizeButton extends AbstractMapButton {\n    constructor(map: MapComponent) {\n        super(map, ButtonPosition.DIAGONAL);\n\n        this.container.addEventListener('click', (e) => {\n            map.toggleMaximized();\n            e.stopPropagation();\n        });\n    }\n\n    override update() {\n        this.container.innerHTML = this.map.maximized ? minimize : maximize;\n        this.container.querySelector('svg').style.transform = `rotate3d(0, 0, 1, ${ROTATION[this.map.config.position.join('-')]}deg)`;\n        this.container.title = this.map.maximized\n            ? this.viewer.config.lang['mapMinimize']\n            : this.viewer.config.lang['mapMaximize'];\n    }\n}\n","import reset from '../icons/reset.svg';\nimport { AbstractMapButton, ButtonPosition } from './AbstractMapButton';\nimport type { MapComponent } from './MapComponent';\n\nexport class MapResetButton extends AbstractMapButton {\n    constructor(map: MapComponent) {\n        super(map, ButtonPosition.HORIZONTAL);\n\n        this.container.title = this.viewer.config.lang['mapReset'];\n        this.container.innerHTML = reset;\n        this.container.querySelector('svg').style.width = '80%';\n\n        this.container.addEventListener('click', (e) => {\n            map.reset();\n            e.stopPropagation();\n        });\n    }\n}\n","import { AbstractComponent, utils } from '@photo-sphere-viewer/core';\nimport minus from '../icons/minus.svg';\nimport plus from '../icons/plus.svg';\nimport type { MapComponent } from './MapComponent';\n\nexport class MapZoomToolbar extends AbstractComponent {\n    private readonly zoomIndicator: HTMLElement;\n    private readonly handler = new utils.PressHandler(100);\n    private time: number;\n    private animation?: ReturnType<typeof requestAnimationFrame>;\n\n    constructor(private map: MapComponent) {\n        super(map, {\n            className: 'psv-map__toolbar',\n        });\n\n        this.container.innerHTML = `${minus}<span class=\"psv-map__toolbar-text\">100%</span>${plus}`;\n\n        this.zoomIndicator = this.container.querySelector('.psv-map__toolbar-text');\n\n        const zoomButtons = this.container.querySelectorAll('svg');\n        zoomButtons[0].dataset['delta'] = '-1';\n        zoomButtons[1].dataset['delta'] = '1';\n\n        this.container.addEventListener('mousedown', this);\n        window.addEventListener('mouseup', this);\n        this.container.addEventListener('touchstart', this);\n        window.addEventListener('touchend', this);\n    }\n\n    override destroy(): void {\n        window.removeEventListener('mouseup', this);\n        window.removeEventListener('touchend', this);\n\n        super.destroy();\n    }\n\n    handleEvent(e: Event) {\n        switch (e.type) {\n            case 'mousedown':\n            case 'touchstart': {\n                const button = utils.getClosest(e.target as HTMLElement, 'svg');\n                const delta: string = button?.dataset['delta'];\n                if (delta) {\n                    cancelAnimationFrame(this.animation);\n                    this.handler.down();\n                    this.time = performance.now();\n                    this.animateZoom(parseInt(delta, 10));\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n                break;\n            }\n            case 'mouseup':\n            case 'touchend':\n                if (this.animation) {\n                    this.handler.up(() => {\n                        cancelAnimationFrame(this.animation);\n                        this.animation = null;\n                    });\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    setText(zoom: number) {\n        this.zoomIndicator.innerText = `${Math.round(Math.exp(zoom) * 100)}%`;\n    }\n\n    private animateZoom(delta: number) {\n        this.animation = requestAnimationFrame((t) => {\n            this.map.zoom((delta * (t - this.time)) / 1000);\n            this.time = t;\n            this.animateZoom(delta);\n        });\n    }\n}\n"],"mappings":"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","names":["utils","AbstractComponent","CONSTANTS","SYSTEM","utils","AbstractComponent","AbstractComponent","AbstractComponent","CONSTANTS","utils","SYSTEM","utils"]}