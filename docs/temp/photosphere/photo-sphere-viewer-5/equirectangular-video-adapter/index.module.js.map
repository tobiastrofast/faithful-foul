{"version":3,"sources":["../src/EquirectangularVideoAdapter.ts","../../shared/AbstractVideoAdapter.ts"],"sourcesContent":["import type { TextureData, Viewer } from '@photo-sphere-viewer/core';\nimport { CONSTANTS, PSVError, utils } from '@photo-sphere-viewer/core';\nimport { MathUtils, Mesh, MeshBasicMaterial, SphereGeometry, VideoTexture } from 'three';\nimport { AbstractVideoAdapter } from '../../shared/AbstractVideoAdapter';\nimport { EquirectangularVideoAdapterConfig, EquirectangularVideoPanorama } from './model';\n\ntype EquirectangularMesh = Mesh<SphereGeometry, MeshBasicMaterial>;\ntype EquirectangularTexture = TextureData<VideoTexture, EquirectangularVideoPanorama>;\n\nconst getConfig = utils.getConfigParser<EquirectangularVideoAdapterConfig>(\n    {\n        resolution: 64,\n        autoplay: false,\n        muted: false,\n        blur: false,\n    },\n    {\n        resolution: (resolution) => {\n            if (!resolution || !MathUtils.isPowerOfTwo(resolution)) {\n                throw new PSVError('EquirectangularTilesAdapter resolution must be power of two');\n            }\n            return resolution;\n        },\n    }\n);\n\n/**\n * Adapter for equirectangular videos\n */\nexport class EquirectangularVideoAdapter extends AbstractVideoAdapter<EquirectangularVideoPanorama> {\n    static override readonly id = 'equirectangular-video';\n\n    protected override readonly config: EquirectangularVideoAdapterConfig;\n\n    private readonly SPHERE_SEGMENTS: number;\n    private readonly SPHERE_HORIZONTAL_SEGMENTS: number;\n\n    constructor(viewer: Viewer, config: EquirectangularVideoAdapterConfig) {\n        super(viewer);\n\n        this.config = getConfig(config);\n\n        this.SPHERE_SEGMENTS = this.config.resolution;\n        this.SPHERE_HORIZONTAL_SEGMENTS = this.SPHERE_SEGMENTS / 2;\n    }\n\n    override loadTexture(panorama: EquirectangularVideoPanorama): Promise<EquirectangularTexture> {\n        return super.loadTexture(panorama).then(({ texture }) => {\n            const video: HTMLVideoElement = texture.image;\n            const panoData = {\n                fullWidth: video.videoWidth,\n                fullHeight: video.videoHeight,\n                croppedWidth: video.videoWidth,\n                croppedHeight: video.videoHeight,\n                croppedX: 0,\n                croppedY: 0,\n                poseHeading: 0,\n                posePitch: 0,\n                poseRoll: 0,\n            };\n\n            return { panorama, texture, panoData };\n        });\n    }\n\n    createMesh(scale = 1): EquirectangularMesh {\n        const geometry = new SphereGeometry(\n            CONSTANTS.SPHERE_RADIUS * scale,\n            this.SPHERE_SEGMENTS,\n            this.SPHERE_HORIZONTAL_SEGMENTS,\n            -Math.PI / 2\n        ).scale(-1, 1, 1) as SphereGeometry;\n\n        const material = new MeshBasicMaterial();\n\n        return new Mesh(geometry, material);\n    }\n\n    setTexture(mesh: EquirectangularMesh, textureData: EquirectangularTexture) {\n        mesh.material.map?.dispose();\n        mesh.material.map = textureData.texture;\n\n        this.switchVideo(textureData.texture);\n    }\n}\n","import type { TextureData, Viewer } from '@photo-sphere-viewer/core';\nimport { AbstractAdapter, events, PSVError } from '@photo-sphere-viewer/core';\nimport { BufferGeometry, Material, Mesh, VideoTexture } from 'three';\n\nexport type AbstractVideoPanorama = {\n    source: string;\n};\n\nexport type AbstractVideoAdapterConfig = {\n    /**\n     * automatically start the video\n     * @default false\n     */\n    autoplay?: boolean;\n    /**\n     * initially mute the video\n     * @default false\n     */\n    muted?: boolean;\n};\n\ntype AbstractVideoMesh = Mesh<BufferGeometry, Material>;\ntype AbstractVideoTexture = TextureData<VideoTexture>;\n\n/**\n * Base video adapters class\n */\nexport abstract class AbstractVideoAdapter<TPanorama extends AbstractVideoPanorama> extends AbstractAdapter<\n    TPanorama,\n    VideoTexture\n> {\n    static override readonly supportsDownload = false;\n    static override readonly supportsOverlay = false;\n\n    protected abstract readonly config: AbstractVideoAdapterConfig;\n\n    private video: HTMLVideoElement;\n\n    constructor(viewer: Viewer) {\n        super(viewer);\n\n        this.viewer.addEventListener(events.BeforeRenderEvent.type, this);\n    }\n\n    override destroy() {\n        this.viewer.removeEventListener(events.BeforeRenderEvent.type, this);\n\n        this.__removeVideo();\n\n        super.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        if (e instanceof events.BeforeRenderEvent) {\n            this.viewer.needsUpdate();\n        }\n    }\n\n    override supportsPreload(): boolean {\n        return false;\n    }\n\n    override supportsTransition(): boolean {\n        return false;\n    }\n\n    loadTexture(panorama: AbstractVideoPanorama): Promise<AbstractVideoTexture> {\n        if (typeof panorama !== 'object' || !panorama.source) {\n            return Promise.reject(new PSVError('Invalid panorama configuration, are you using the right adapter?'));\n        }\n\n        if (!this.viewer.getPlugin('video')) {\n            return Promise.reject(new PSVError('Video adapters require VideoPlugin to be loaded too.'));\n        }\n\n        const video = this.__createVideo(panorama.source);\n\n        return this.__videoLoadPromise(video).then(() => {\n            const texture = new VideoTexture(video);\n            return { panorama, texture };\n        });\n    }\n\n    protected switchVideo(texture: VideoTexture) {\n        let currentTime;\n        let duration;\n        let paused = !this.config.autoplay;\n        let muted = this.config.muted;\n        let volume = 1;\n        if (this.video) {\n            ({ currentTime, duration, paused, muted, volume } = this.video);\n        }\n\n        this.__removeVideo();\n        this.video = texture.image;\n\n        // keep current time when switching resolution\n        if (this.video.duration === duration) {\n            this.video.currentTime = currentTime;\n        }\n\n        // keep volume\n        this.video.muted = muted;\n        this.video.volume = volume;\n\n        // play\n        if (!paused) {\n            this.video.play();\n        }\n    }\n\n    setTextureOpacity(mesh: AbstractVideoMesh, opacity: number) {\n        mesh.material.opacity = opacity;\n        mesh.material.transparent = opacity < 1;\n    }\n\n    setOverlay() {\n        throw new PSVError('VideoAdapter does not support overlay');\n    }\n\n    disposeTexture(textureData: AbstractVideoTexture) {\n        if (textureData.texture) {\n            const video: HTMLVideoElement = textureData.texture.image;\n            video.pause();\n            this.viewer.container.removeChild(video);\n        }\n        textureData.texture?.dispose();\n    }\n\n    private __removeVideo() {\n        if (this.video) {\n            this.video.pause();\n            this.viewer.container.removeChild(this.video);\n            delete this.video;\n        }\n    }\n\n    private __createVideo(src: string): HTMLVideoElement {\n        const video = document.createElement('video');\n        video.crossOrigin = this.viewer.config.withCredentials ? 'use-credentials' : 'anonymous';\n        video.loop = true;\n        video.playsInline = true;\n        video.style.display = 'none';\n        video.muted = this.config.muted;\n        video.src = src;\n        video.preload = 'metadata';\n\n        this.viewer.container.appendChild(video);\n\n        return video;\n    }\n\n    private __videoLoadPromise(video: HTMLVideoElement): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const onLoaded = () => {\n                if (this.video && video.duration === this.video.duration) {\n                    resolve(this.__videoBufferPromise(video, this.video.currentTime));\n                } else {\n                    resolve();\n                }\n                video.removeEventListener('loadedmetadata', onLoaded);\n            };\n\n            const onError = (err: ErrorEvent) => {\n                reject(err);\n                video.removeEventListener('error', onError);\n            };\n\n            video.addEventListener('loadedmetadata', onLoaded);\n            video.addEventListener('error', onError);\n        });\n    }\n\n    private __videoBufferPromise(video: HTMLVideoElement, currentTime: number): Promise<void> {\n        return new Promise((resolve) => {\n            function onBuffer() {\n                const buffer = video.buffered;\n                for (let i = 0, l = buffer.length; i < l; i++) {\n                    if (buffer.start(i) <= video.currentTime && buffer.end(i) >= video.currentTime) {\n                        video.pause();\n                        video.removeEventListener('buffer', onBuffer);\n                        video.removeEventListener('progress', onBuffer);\n                        resolve();\n                        break;\n                    }\n                }\n            }\n\n            // try to reduce the switching time by preloading in advance\n            // FIXME find a better way ?\n            video.currentTime = Math.min(currentTime + 2000, video.duration);\n            video.muted = true;\n\n            video.addEventListener('buffer', onBuffer);\n            video.addEventListener('progress', onBuffer);\n\n            video.play();\n        });\n    }\n}\n"],"mappings":"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","names":["PSVError","Mesh","PSVError","Mesh"]}