{"version":3,"sources":["../src/index.ts","../src/events.ts","../src/MarkersButton.ts","../src/MarkersListButton.ts","../src/constants.ts","../src/MarkersPlugin.ts","../src/Marker.ts","../src/utils.ts"],"sourcesContent":["import { DEFAULTS, registerButton } from '@photo-sphere-viewer/core';\nimport * as events from './events';\nimport { MarkersButton } from './MarkersButton';\nimport { MarkersListButton } from './MarkersListButton';\n\nDEFAULTS.lang[MarkersButton.id] = 'Markers';\nDEFAULTS.lang[MarkersListButton.id] = 'Markers list';\nregisterButton(MarkersButton, 'caption:left');\nregisterButton(MarkersListButton, 'caption:left');\n\nexport type { Marker, MarkerType } from './Marker';\nexport { MarkersPlugin } from './MarkersPlugin';\nexport * from './model';\nexport { events };\n\n/** @internal  */\nimport './style.scss';\n","import { TypedEvent } from '@photo-sphere-viewer/core';\nimport type { Marker } from './Marker';\nimport type { MarkersPlugin } from './MarkersPlugin';\n\n/**\n * Base class for events dispatched by {@link MarkersPlugin}\n */\nexport abstract class MarkersPluginEvent extends TypedEvent<MarkersPlugin> {}\n\n/**\n * @event Triggered when the visibility of a marker changes\n */\nexport class MarkerVisibilityEvent extends MarkersPluginEvent {\n    static override readonly type = 'marker-visibility';\n    override type: 'marker-visibility';\n\n    constructor(public readonly marker: Marker, public readonly visible: boolean) {\n        super(MarkerVisibilityEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the animation to a marker is done\n */\nexport class GotoMarkerDoneEvent extends MarkersPluginEvent {\n    static override readonly type = 'goto-marker-done';\n    override type: 'goto-marker-done';\n\n    constructor(public readonly marker: Marker) {\n        super(GotoMarkerDoneEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the user puts the cursor away from a marker\n */\nexport class LeaveMarkerEvent extends MarkersPluginEvent {\n    static override readonly type = 'leave-marker';\n    override type: 'leave-marker';\n\n    constructor(public readonly marker: Marker) {\n        super(LeaveMarkerEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the user puts the cursor hover a marker\n */\nexport class EnterMarkerEvent extends MarkersPluginEvent {\n    static override readonly type = 'enter-marker';\n    override type: 'enter-marker';\n\n    constructor(public readonly marker: Marker) {\n        super(EnterMarkerEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the user clicks on a marker\n */\nexport class SelectMarkerEvent extends MarkersPluginEvent {\n    static override readonly type = 'select-marker';\n    override type: 'select-marker';\n\n    constructor(\n        public readonly marker: Marker,\n        public readonly doubleClick: boolean,\n        public readonly rightClick: boolean\n    ) {\n        super(SelectMarkerEvent.type);\n    }\n}\n\n/**\n * @event Triggered when a marker is selected from the side panel\n */\nexport class SelectMarkerListEvent extends MarkersPluginEvent {\n    static override readonly type = 'select-marker-list';\n    override type: 'select-marker-list';\n\n    constructor(public readonly marker: Marker) {\n        super(SelectMarkerListEvent.type);\n    }\n}\n\n/**\n * @event Triggered when a marker was selected and the user clicks elsewhere\n */\nexport class UnselectMarkerEvent extends MarkersPluginEvent {\n    static override readonly type = 'unselect-marker';\n    override type: 'unselect-marker';\n\n    constructor(public readonly marker: Marker) {\n        super(UnselectMarkerEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the markers are hidden\n */\nexport class HideMarkersEvent extends MarkersPluginEvent {\n    static override readonly type = 'hide-markers';\n    override type: 'hide-markers';\n\n    constructor() {\n        super(HideMarkersEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the markers change\n */\nexport class SetMarkersEvent extends MarkersPluginEvent {\n    static override readonly type = 'set-markers';\n    override type: 'set-markers';\n\n    constructor(public readonly markers: Marker[]) {\n        super(SetMarkersEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the markers are shown\n */\nexport class ShowMarkersEvent extends MarkersPluginEvent {\n    static override readonly type = 'show-markers';\n    override type: 'show-markers';\n\n    constructor() {\n        super(ShowMarkersEvent.type);\n    }\n}\n\n/**\n * @event Used to alter the list of markers displayed in the side-panel\n */\nexport class RenderMarkersListEvent extends MarkersPluginEvent {\n    static override readonly type = 'render-markers-list';\n    override type: 'render-markers-list';\n\n    constructor(\n        /** the list of markers to display, can be modified */\n        public markers: Marker[]\n    ) {\n        super(RenderMarkersListEvent.type);\n    }\n}\n\nexport type MarkersPluginEvents =\n    | MarkerVisibilityEvent\n    | GotoMarkerDoneEvent\n    | LeaveMarkerEvent\n    | EnterMarkerEvent\n    | SelectMarkerEvent\n    | SelectMarkerListEvent\n    | UnselectMarkerEvent\n    | HideMarkersEvent\n    | SetMarkersEvent\n    | ShowMarkersEvent\n    | RenderMarkersListEvent;\n","import type { Navbar } from '@photo-sphere-viewer/core';\nimport { AbstractButton } from '@photo-sphere-viewer/core';\nimport { HideMarkersEvent, ShowMarkersEvent } from './events';\nimport type { MarkersPlugin } from './MarkersPlugin';\nimport pin from './icons/pin.svg';\n\nexport class MarkersButton extends AbstractButton {\n    static override readonly id = 'markers';\n\n    private readonly plugin: MarkersPlugin;\n\n    constructor(navbar: Navbar) {\n        super(navbar, {\n            className: 'psv-markers-button',\n            icon: pin,\n            hoverScale: true,\n            collapsable: true,\n            tabbable: true,\n        });\n\n        this.plugin = this.viewer.getPlugin('markers');\n\n        if (this.plugin) {\n            this.plugin.addEventListener(ShowMarkersEvent.type, this);\n            this.plugin.addEventListener(HideMarkersEvent.type, this);\n\n            this.toggleActive(true);\n        }\n    }\n\n    override destroy() {\n        if (this.plugin) {\n            this.plugin.removeEventListener(ShowMarkersEvent.type, this);\n            this.plugin.removeEventListener(HideMarkersEvent.type, this);\n        }\n\n        super.destroy();\n    }\n\n    override isSupported() {\n        return !!this.plugin;\n    }\n\n    handleEvent(e: Event) {\n        if (e instanceof ShowMarkersEvent) {\n            this.toggleActive(true);\n        } else if (e instanceof HideMarkersEvent) {\n            this.toggleActive(false);\n        }\n    }\n\n    onClick() {\n        this.plugin.toggleAllMarkers();\n    }\n}\n","import type { Navbar } from '@photo-sphere-viewer/core';\nimport { AbstractButton, events } from '@photo-sphere-viewer/core';\nimport { ID_PANEL_MARKERS_LIST } from './constants';\nimport type { MarkersPlugin } from './MarkersPlugin';\nimport pinList from './icons/pin-list.svg';\n\nexport class MarkersListButton extends AbstractButton {\n    static override readonly id = 'markersList';\n\n    private readonly plugin: MarkersPlugin;\n\n    constructor(navbar: Navbar) {\n        super(navbar, {\n            className: ' psv-markers-list-button',\n            icon: pinList,\n            hoverScale: true,\n            collapsable: true,\n            tabbable: true,\n        });\n\n        this.plugin = this.viewer.getPlugin('markers');\n\n        if (this.plugin) {\n            this.viewer.addEventListener(events.ShowPanelEvent.type, this);\n            this.viewer.addEventListener(events.HidePanelEvent.type, this);\n        }\n    }\n\n    override destroy() {\n        this.viewer.removeEventListener(events.ShowPanelEvent.type, this);\n        this.viewer.removeEventListener(events.HidePanelEvent.type, this);\n\n        super.destroy();\n    }\n\n    override isSupported() {\n        return !!this.plugin;\n    }\n\n    handleEvent(e: Event) {\n        if (e instanceof events.ShowPanelEvent) {\n            this.toggleActive(e.panelId === ID_PANEL_MARKERS_LIST);\n        } else if (e instanceof events.HidePanelEvent) {\n            this.toggleActive(false);\n        }\n    }\n\n    onClick() {\n        this.plugin.toggleMarkersList();\n    }\n}\n","import { utils } from '@photo-sphere-viewer/core';\nimport type { Marker } from './Marker';\nimport icon from './icons/pin-list.svg';\n\n/**\n * Namespace for SVG creation\n * @internal\n */\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\n\n/**\n * Property name added to marker elements\n * @internal\n */\nexport const MARKER_DATA = 'psvMarker';\n\n/**\n * Property name added to marker elements (dash-case)\n * @internal\n */\nexport const MARKER_DATA_KEY = utils.dasherize(MARKER_DATA);\n\n/**\n * Panel identifier for marker content\n * @internal\n */\nexport const ID_PANEL_MARKER = 'marker';\n\n/**\n * Panel identifier for markers list\n * @internal\n */\nexport const ID_PANEL_MARKERS_LIST = 'markersList';\n\n/**\n * Markers list template\n * @internal\n */\nexport const MARKERS_LIST_TEMPLATE = (markers: Marker[], title: string) => `\n<div class=\"psv-panel-menu psv-panel-menu--stripped\">\n <h1 class=\"psv-panel-menu-title\">${icon} ${title}</h1>\n <ul class=\"psv-panel-menu-list\">\n   ${markers.map((marker) => `\n   <li data-${MARKER_DATA_KEY}=\"${marker.id}\" class=\"psv-panel-menu-item\" tabindex=\"0\">\n     ${marker.type === 'image' ? `<span class=\"psv-panel-menu-item-icon\"><img src=\"${marker.definition}\"/></span>` : ''}\n     <span class=\"psv-panel-menu-item-label\">${marker.getListContent()}</span>\n   </li>\n   `).join('')}\n </ul>\n</div>\n`;\n","import type { Point, Tooltip, Viewer } from '@photo-sphere-viewer/core';\nimport { AbstractConfigurablePlugin, CONSTANTS, events, PSVError, utils } from '@photo-sphere-viewer/core';\nimport { Vector3 } from 'three';\nimport { ID_PANEL_MARKER, ID_PANEL_MARKERS_LIST, MARKERS_LIST_TEMPLATE, MARKER_DATA, SVG_NS } from './constants';\nimport {\n    EnterMarkerEvent,\n    GotoMarkerDoneEvent,\n    HideMarkersEvent,\n    LeaveMarkerEvent,\n    MarkersPluginEvents,\n    MarkerVisibilityEvent,\n    RenderMarkersListEvent,\n    SelectMarkerEvent,\n    SelectMarkerListEvent,\n    SetMarkersEvent,\n    ShowMarkersEvent,\n    UnselectMarkerEvent,\n} from './events';\nimport { Marker } from './Marker';\nimport { MarkersButton } from './MarkersButton';\nimport { MarkersListButton } from './MarkersListButton';\nimport { MarkerConfig, MarkersPluginConfig, UpdatableMarkersPluginConfig } from './model';\n\nconst getConfig = utils.getConfigParser<MarkersPluginConfig>({\n    clickEventOnMarker: false,\n    gotoMarkerSpeed: '8rpm',\n    markers: null,\n});\n\n/**\n * Displays various markers on the viewer\n */\nexport class MarkersPlugin extends AbstractConfigurablePlugin<\n    MarkersPluginConfig,\n    MarkersPluginConfig,\n    UpdatableMarkersPluginConfig,\n    MarkersPluginEvents\n> {\n    static override readonly id = 'markers';\n    static override readonly configParser = getConfig;\n    static override readonly readonlyOptions: Array<keyof MarkersPluginConfig> = ['markers'];\n\n    private readonly markers: Record<string, Marker> = {};\n\n    private readonly state = {\n        visible: true,\n        showAllTooltips: false,\n        currentMarker: null as Marker,\n        hoveringMarker: null as Marker,\n    };\n\n    private readonly container: HTMLElement;\n    private readonly svgContainer: SVGElement;\n\n    constructor(viewer: Viewer, config: MarkersPluginConfig) {\n        super(viewer, config);\n\n        this.container = document.createElement('div');\n        this.container.className = 'psv-markers';\n        this.container.style.cursor = this.viewer.config.mousemove ? 'move' : 'default';\n\n        this.svgContainer = document.createElementNS(SVG_NS, 'svg');\n        this.svgContainer.setAttribute('class', 'psv-markers-svg-container');\n        this.container.appendChild(this.svgContainer);\n\n        // Markers events via delegation\n        this.container.addEventListener('mouseenter', this, true);\n        this.container.addEventListener('mouseleave', this, true);\n        this.container.addEventListener('mousemove', this, true);\n        this.container.addEventListener('contextmenu', this);\n    }\n\n    /**\n     * @internal\n     */\n    override init() {\n        super.init();\n\n        this.viewer.container.appendChild(this.container);\n\n        // Viewer events\n        this.viewer.addEventListener(events.ClickEvent.type, this);\n        this.viewer.addEventListener(events.DoubleClickEvent.type, this);\n        this.viewer.addEventListener(events.RenderEvent.type, this);\n        this.viewer.addEventListener(events.ConfigChangedEvent.type, this);\n        this.viewer.addEventListener(events.ObjectEnterEvent.type, this);\n        this.viewer.addEventListener(events.ObjectHoverEvent.type, this);\n        this.viewer.addEventListener(events.ObjectLeaveEvent.type, this);\n        this.viewer.addEventListener(events.ReadyEvent.type, this, { once: true });\n    }\n\n    /**\n     * @internal\n     */\n    override destroy() {\n        this.clearMarkers(false);\n\n        this.viewer.unobserveObjects(MARKER_DATA);\n\n        this.viewer.removeEventListener(events.ClickEvent.type, this);\n        this.viewer.removeEventListener(events.DoubleClickEvent.type, this);\n        this.viewer.removeEventListener(events.RenderEvent.type, this);\n        this.viewer.removeEventListener(events.ConfigChangedEvent.type, this);\n        this.viewer.removeEventListener(events.ObjectEnterEvent.type, this);\n        this.viewer.removeEventListener(events.ObjectHoverEvent.type, this);\n        this.viewer.removeEventListener(events.ObjectLeaveEvent.type, this);\n        this.viewer.removeEventListener(events.ReadyEvent.type, this);\n\n        this.viewer.container.removeChild(this.container);\n\n        super.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        switch (e.type) {\n            case events.ReadyEvent.type:\n                if (this.config.markers) {\n                    this.setMarkers(this.config.markers);\n                    delete this.config.markers;\n                }\n                break;\n\n            case events.RenderEvent.type:\n                this.renderMarkers();\n                break;\n\n            case events.ClickEvent.type:\n                this.__onClick(e as events.ClickEvent, false);\n                break;\n\n            case events.DoubleClickEvent.type:\n                this.__onClick(e as events.DoubleClickEvent, true);\n                break;\n\n            case events.ConfigChangedEvent.type:\n                this.container.style.cursor = this.viewer.config.mousemove ? 'move' : 'default';\n                break;\n\n            case events.ObjectEnterEvent.type:\n            case events.ObjectLeaveEvent.type:\n            case events.ObjectHoverEvent.type:\n                if ((e as events.ObjectEvent).userDataKey === MARKER_DATA) {\n                    const event = (e as events.ObjectEvent).originalEvent;\n                    const marker = (e as events.ObjectEvent).object.userData[MARKER_DATA];\n                    switch (e.type) {\n                        case events.ObjectEnterEvent.type:\n                            this.__onMouseEnter(event, marker);\n                            break;\n                        case events.ObjectLeaveEvent.type:\n                            this.__onMouseLeave(event, marker);\n                            break;\n                        case events.ObjectHoverEvent.type:\n                            this.__onMouseMove(event, marker);\n                            break;\n                    }\n                }\n                break;\n\n            case 'mouseenter':\n                this.__onMouseEnter(e as MouseEvent, this.__getTargetMarker(e.target as HTMLElement));\n                break;\n\n            case 'mouseleave':\n                this.__onMouseLeave(e as MouseEvent, this.__getTargetMarker(e.target as HTMLElement));\n                break;\n\n            case 'mousemove':\n                this.__onMouseMove(e as MouseEvent, this.__getTargetMarker(e.target as HTMLElement));\n                break;\n\n            case 'contextmenu':\n                e.preventDefault();\n                break;\n        }\n    }\n\n    /**\n     * Toggles all markers\n     */\n    toggleAllMarkers() {\n        if (this.state.visible) {\n            this.hideAllMarkers();\n        } else {\n            this.showAllMarkers();\n        }\n    }\n\n    /**\n     * Shows all markers\n     */\n    showAllMarkers() {\n        this.state.visible = true;\n\n        this.renderMarkers();\n\n        this.dispatchEvent(new ShowMarkersEvent());\n    }\n\n    /**\n     * Hides all markers\n     */\n    hideAllMarkers() {\n        this.state.visible = false;\n\n        this.renderMarkers();\n\n        this.dispatchEvent(new HideMarkersEvent());\n    }\n\n    /**\n     * Toggles the visibility of all tooltips\n     */\n    toggleAllTooltips() {\n        if (this.state.showAllTooltips) {\n            this.hideAllTooltips();\n        } else {\n            this.showAllTooltips();\n        }\n    }\n\n    /**\n     *  Displays all tooltips\n     */\n    showAllTooltips() {\n        this.state.showAllTooltips = true;\n        Object.values(this.markers).forEach((marker) => {\n            marker.state.staticTooltip = true;\n            marker.showTooltip();\n        });\n    }\n\n    /**\n     * Hides all tooltips\n     */\n    hideAllTooltips() {\n        this.state.showAllTooltips = false;\n        Object.values(this.markers).forEach((marker) => {\n            marker.state.staticTooltip = false;\n            marker.hideTooltip();\n        });\n    }\n\n    /**\n     * Returns the total number of markers\n     */\n    getNbMarkers(): number {\n        return Object.keys(this.markers).length;\n    }\n\n    /**\n     * Returns all the markers\n     */\n    getMarkers(): Marker[] {\n        return Object.values(this.markers);\n    }\n\n    /**\n     * Adds a new marker to viewer\n     * @throws {@link PSVError} when the marker's id is missing or already exists\n     */\n    addMarker(config: MarkerConfig, render = true) {\n        if (this.markers[config.id]) {\n            throw new PSVError(`marker \"${config.id}\" already exists`);\n        }\n\n        const marker = new Marker(this.viewer, config);\n\n        if (marker.isNormal()) {\n            this.container.appendChild(marker.domElement);\n        } else if (marker.isPoly() || marker.isSvg()) {\n            this.svgContainer.appendChild(marker.domElement);\n        } else if (marker.is3d()) {\n            this.viewer.renderer.addObject(marker.threeElement);\n        } else {\n            throw new PSVError('invalid state');\n        }\n\n        this.markers[marker.id] = marker;\n\n        if (render) {\n            this.__afterChangerMarkers();\n        }\n    }\n\n    /**\n     * Returns the internal marker object for a marker id\n     * @throws {@link PSVError} when the marker cannot be found\n     */\n    getMarker(markerId: string | MarkerConfig): Marker {\n        const id = typeof markerId === 'object' ? markerId.id : markerId;\n\n        if (!this.markers[id]) {\n            throw new PSVError(`cannot find marker \"${id}\"`);\n        }\n\n        return this.markers[id];\n    }\n\n    /**\n     * Returns the last marker selected by the user\n     */\n    getCurrentMarker(): Marker {\n        return this.state.currentMarker;\n    }\n\n    /**\n     * Updates the existing marker with the same id\n     * @description Every property can be changed but you can't change its type (Eg: `image` to `html`)\n     */\n    updateMarker(config: MarkerConfig, render = true) {\n        const marker = this.getMarker(config.id);\n\n        marker.update(config);\n\n        if (render) {\n            this.__afterChangerMarkers();\n        }\n    }\n\n    /**\n     * Removes a marker from the viewer\n     */\n    removeMarker(markerId: string | MarkerConfig, render = true) {\n        const marker = this.getMarker(markerId);\n\n        if (marker.isNormal()) {\n            this.container.removeChild(marker.domElement);\n        } else if (marker.isPoly() || marker.isSvg()) {\n            this.svgContainer.removeChild(marker.domElement);\n        } else if (marker.is3d()) {\n            this.viewer.renderer.removeObject(marker.threeElement);\n        }\n\n        if (this.state.hoveringMarker === marker) {\n            this.state.hoveringMarker = null;\n        }\n\n        if (this.state.currentMarker === marker) {\n            this.state.currentMarker = null;\n        }\n\n        marker.destroy();\n        delete this.markers[marker.id];\n\n        if (render) {\n            this.__afterChangerMarkers();\n        }\n    }\n\n    /**\n     * Removes multiple markers\n     */\n    removeMarkers(markerIds: string[], render = true) {\n        markerIds.forEach((markerId) => this.removeMarker(markerId, false));\n\n        if (render) {\n            this.__afterChangerMarkers();\n        }\n    }\n\n    /**\n     * Replaces all markers\n     */\n    setMarkers(markers: MarkerConfig[], render = true) {\n        this.clearMarkers(false);\n\n        markers?.forEach((marker) => {\n            this.addMarker(marker, false);\n        });\n\n        if (render) {\n            this.__afterChangerMarkers();\n        }\n    }\n\n    /**\n     * Removes all markers\n     */\n    clearMarkers(render = true) {\n        Object.keys(this.markers).forEach((markerId) => {\n            this.removeMarker(markerId, false);\n        });\n\n        if (render) {\n            this.__afterChangerMarkers();\n        }\n    }\n\n    /**\n     * Rotate the view to face the marker\n     */\n    gotoMarker(markerId: string | MarkerConfig, speed: string | number = this.config.gotoMarkerSpeed): Promise<void> {\n        const marker = this.getMarker(markerId);\n\n        if (!speed) {\n            this.viewer.rotate(marker.state.position);\n            if (!utils.isNil(marker.config.zoomLvl)) {\n                this.viewer.zoom(marker.config.zoomLvl);\n            }\n            this.dispatchEvent(new GotoMarkerDoneEvent(marker));\n            return Promise.resolve();\n        } else {\n            return this.viewer\n                .animate({\n                    ...marker.state.position,\n                    zoom: marker.config.zoomLvl,\n                    speed: speed,\n                })\n                .then(() => {\n                    this.dispatchEvent(new GotoMarkerDoneEvent(marker));\n                });\n        }\n    }\n\n    /**\n     * Hides a marker\n     */\n    hideMarker(markerId: string | MarkerConfig) {\n        this.toggleMarker(markerId, false);\n    }\n\n    /**\n     * Shows a marker\n     */\n    showMarker(markerId: string | MarkerConfig) {\n        this.toggleMarker(markerId, true);\n    }\n\n    /**\n     * Forces the display of the tooltip of a marker\n     */\n    showMarkerTooltip(markerId: string | MarkerConfig) {\n        const marker = this.getMarker(markerId);\n        marker.state.staticTooltip = true;\n        marker.showTooltip();\n    }\n\n    /**\n     * Hides the tooltip of a marker\n     */\n    hideMarkerTooltip(markerId: string | MarkerConfig) {\n        const marker = this.getMarker(markerId);\n        marker.state.staticTooltip = false;\n        marker.hideTooltip();\n    }\n\n    /**\n     * Toggles a marker visibility\n     */\n    toggleMarker(markerId: string | MarkerConfig, visible?: boolean) {\n        const marker = this.getMarker(markerId);\n        marker.visible = visible === null ? !marker.visible : visible;\n        this.viewer.needsUpdate();\n    }\n\n    /**\n     * Opens the panel with the content of the marker\n     */\n    showMarkerPanel(markerId: string | MarkerConfig) {\n        const marker = this.getMarker(markerId);\n\n        if (marker?.config?.content) {\n            this.viewer.panel.show({\n                id: ID_PANEL_MARKER,\n                content: marker.config.content,\n            });\n        } else {\n            this.hideMarkerPanel();\n        }\n    }\n\n    /**\n     * Closes the panel if currently showing the content of a marker\n     */\n    hideMarkerPanel() {\n        this.viewer.panel.hide(ID_PANEL_MARKER);\n    }\n\n    /**\n     * Toggles the visibility of the list of markers\n     */\n    toggleMarkersList() {\n        if (this.viewer.panel.isVisible(ID_PANEL_MARKERS_LIST)) {\n            this.hideMarkersList();\n        } else {\n            this.showMarkersList();\n        }\n    }\n\n    /**\n     * Opens side panel with the list of markers\n     */\n    showMarkersList() {\n        let markers: Marker[] = [];\n        Object.values(this.markers).forEach((marker) => {\n            if (marker.visible && !marker.config.hideList) {\n                markers.push(marker);\n            }\n        });\n\n        const e = new RenderMarkersListEvent(markers);\n        this.dispatchEvent(e);\n        markers = e.markers;\n\n        this.viewer.panel.show({\n            id: ID_PANEL_MARKERS_LIST,\n            content: MARKERS_LIST_TEMPLATE(markers, this.viewer.config.lang[MarkersButton.id]),\n            noMargin: true,\n            clickHandler: (target) => {\n                const li = utils.getClosest(target, 'li');\n                const markerId = li ? li.dataset[MARKER_DATA] : undefined;\n\n                if (markerId) {\n                    const marker = this.getMarker(markerId);\n\n                    this.dispatchEvent(new SelectMarkerListEvent(marker));\n\n                    this.gotoMarker(marker.id);\n                    this.hideMarkersList();\n                }\n            },\n        });\n    }\n\n    /**\n     * Closes side panel if it contains the list of markers\n     */\n    hideMarkersList() {\n        this.viewer.panel.hide(ID_PANEL_MARKERS_LIST);\n    }\n\n    /**\n     * Updates the visibility and the position of all markers\n     */\n    renderMarkers() {\n        const zoomLevel = this.viewer.getZoomLevel();\n        const viewerPosition = this.viewer.getPosition();\n\n        Object.values(this.markers).forEach((marker) => {\n            let isVisible = this.state.visible && marker.visible;\n            let visibilityChanged = false;\n            let position: Point = null;\n\n            if (isVisible && marker.is3d()) {\n                position = this.__getMarkerPosition(marker);\n                isVisible = this.__isMarkerVisible(marker, position);\n            } else if (isVisible && marker.isPoly()) {\n                const positions = this.__getPolyPositions(marker);\n                isVisible = positions.length > (marker.isPolygon() ? 2 : 1);\n\n                if (isVisible) {\n                    position = this.__getMarkerPosition(marker);\n\n                    const points = positions.map((pos) => pos.x - position.x + ',' + (pos.y - position.y)).join(' ');\n\n                    marker.domElement.setAttributeNS(null, 'points', points);\n                    marker.domElement.setAttributeNS(null, 'transform', `translate(${position.x} ${position.y})`);\n                }\n            } else if (isVisible) {\n                if (marker.state.dynamicSize) {\n                    this.__updateMarkerSize(marker);\n                }\n\n                position = this.__getMarkerPosition(marker);\n                isVisible = this.__isMarkerVisible(marker, position);\n\n                if (isVisible) {\n                    const scale = marker.getScale(zoomLevel, viewerPosition);\n\n                    if (marker.isSvg()) {\n                        // simulate transform-origin relative to SVG element\n                        const x = position.x + marker.state.size.width * marker.state.anchor.x * (1 - scale);\n                        const y = position.y + marker.state.size.height * marker.state.anchor.y * (1 - scale);\n                        marker.domElement.setAttributeNS(\n                            null,\n                            'transform',\n                            `translate(${x}, ${y}) scale(${scale}, ${scale})`\n                        );\n                    } else {\n                        marker.domElement.style.transform = `translate3D(${position.x}px, ${position.y}px, 0px) scale(${scale}, ${scale})`;\n                    }\n                }\n            }\n\n            visibilityChanged = marker.state.visible !== isVisible;\n            marker.state.visible = isVisible;\n            marker.state.position2D = isVisible ? position : null;\n\n            if (!marker.is3d()) {\n                utils.toggleClass(marker.domElement, 'psv-marker--visible', isVisible);\n            }\n\n            if (!isVisible) {\n                marker.hideTooltip();\n            } else if (marker.state.staticTooltip) {\n                marker.showTooltip();\n            } else if (\n                marker.config.tooltip?.trigger === 'click'\n                || (marker === this.state.hoveringMarker && !marker.isPoly())\n            ) {\n                marker.refreshTooltip();\n            } else if (marker !== this.state.hoveringMarker) {\n                marker.hideTooltip();\n            }\n\n            if (visibilityChanged) {\n                this.dispatchEvent(new MarkerVisibilityEvent(marker, isVisible));\n            }\n        });\n    }\n\n    /**\n     * Determines if a point marker is visible<br>\n     * It tests if the point is in the general direction of the camera, then check if it's in the viewport\n     */\n    private __isMarkerVisible(marker: Marker, position: Point): boolean {\n        return marker.state.positions3D[0].dot(this.viewer.state.direction) > 0\n            && position.x + marker.state.size.width >= 0\n            && position.x - marker.state.size.width <= this.viewer.state.size.width\n            && position.y + marker.state.size.height >= 0\n            && position.y - marker.state.size.height <= this.viewer.state.size.height;\n    }\n\n    /**\n     * Computes the real size of a marker\n     * @description This is done by removing all it's transformations (if any) and making it visible\n     * before querying its bounding rect\n     */\n    private __updateMarkerSize(marker: Marker) {\n        const element = marker.domElement;\n\n        element.classList.add('psv-marker--transparent');\n\n        let transform;\n        if (marker.isSvg()) {\n            transform = element.getAttributeNS(null, 'transform');\n            element.removeAttributeNS(null, 'transform');\n        } else {\n            transform = element.style.transform;\n            element.style.transform = '';\n        }\n\n        const rect = element.getBoundingClientRect();\n        marker.state.size = {\n            width: rect.width,\n            height: rect.height,\n        };\n\n        element.classList.remove('psv-marker--transparent');\n\n        if (transform) {\n            if (marker.isSvg()) {\n                element.setAttributeNS(null, 'transform', transform);\n            } else {\n                element.style.transform = transform;\n            }\n        }\n\n        // the size is no longer dynamic once known\n        marker.state.dynamicSize = false;\n    }\n\n    /**\n     * Computes viewer coordinates of a marker\n     */\n    private __getMarkerPosition(marker: Marker): Point {\n        if (marker.isPoly()) {\n            return this.viewer.dataHelper.sphericalCoordsToViewerCoords(marker.state.position);\n        } else {\n            const position = this.viewer.dataHelper.vector3ToViewerCoords(marker.state.positions3D[0]);\n\n            position.x -= marker.state.size.width * marker.state.anchor.x;\n            position.y -= marker.state.size.height * marker.state.anchor.y;\n\n            return position;\n        }\n    }\n\n    /**\n     * Computes viewer coordinates of each point of a polygon/polyline<br>\n     * It handles points behind the camera by creating intermediary points suitable for the projector\n     */\n    private __getPolyPositions(marker: Marker): Point[] {\n        const nbVectors = marker.state.positions3D.length;\n\n        // compute if each vector is visible\n        const positions3D = marker.state.positions3D.map((vector) => {\n            return {\n                vector: vector,\n                visible: vector.dot(this.viewer.state.direction) > 0,\n            };\n        });\n\n        // get pairs of visible/invisible vectors for each invisible vector connected to a visible vector\n        const toBeComputed: { visible: Vector3; invisible: Vector3; index: number }[] = [];\n        positions3D.forEach((pos, i) => {\n            if (!pos.visible) {\n                const neighbours = [\n                    i === 0 ? positions3D[nbVectors - 1] : positions3D[i - 1],\n                    i === nbVectors - 1 ? positions3D[0] : positions3D[i + 1],\n                ];\n\n                neighbours.forEach((neighbour) => {\n                    if (neighbour.visible) {\n                        toBeComputed.push({\n                            visible: neighbour.vector,\n                            invisible: pos.vector,\n                            index: i,\n                        });\n                    }\n                });\n            }\n        });\n\n        // compute intermediary vector for each pair (the loop is reversed for splice to insert at the right place)\n        toBeComputed.reverse().forEach((pair) => {\n            positions3D.splice(pair.index, 0, {\n                vector: this.__getPolyIntermediaryPoint(pair.visible, pair.invisible),\n                visible: true,\n            });\n        });\n\n        // translate vectors to screen pos\n        return positions3D\n            .filter((pos) => pos.visible)\n            .map((pos) => this.viewer.dataHelper.vector3ToViewerCoords(pos.vector));\n    }\n\n    /**\n     * Given one point in the same direction of the camera and one point behind the camera,\n     * computes an intermediary point on the great circle delimiting the half sphere visible by the camera.\n     * The point is shifted by .01 rad because the projector cannot handle points exactly on this circle.\n     * @todo : does not work with fisheye view (must not use the great circle)\n     * @link http://math.stackexchange.com/a/1730410/327208\n     */\n    private __getPolyIntermediaryPoint(P1: Vector3, P2: Vector3): Vector3 {\n        const C = this.viewer.state.direction.clone().normalize();\n        const N = new Vector3().crossVectors(P1, P2).normalize();\n        const V = new Vector3().crossVectors(N, P1).normalize();\n        const X = P1.clone().multiplyScalar(-C.dot(V));\n        const Y = V.clone().multiplyScalar(C.dot(P1));\n        const H = new Vector3().addVectors(X, Y).normalize();\n        const a = new Vector3().crossVectors(H, C);\n        return H.applyAxisAngle(a, 0.01).multiplyScalar(CONSTANTS.SPHERE_RADIUS);\n    }\n\n    /**\n     * Returns the marker associated to an event target\n     */\n    private __getTargetMarker(target: HTMLElement, closest = false): Marker {\n        const target2 = closest ? utils.getClosest(target, '.psv-marker') : target;\n        return target2 ? (target2 as any)[MARKER_DATA] : undefined;\n    }\n\n    /**\n     * Checks if an event target is in the tooltip\n     */\n    private __targetOnTooltip(target: HTMLElement, tooltip: Tooltip): boolean {\n        return target && tooltip ? utils.hasParent(target, tooltip.container) : false;\n    }\n\n    /**\n     * Handles mouse enter events, show the tooltip for non polygon markers\n     */\n    private __onMouseEnter(e: MouseEvent, marker: Marker) {\n        if (marker && !marker.isPoly()) {\n            this.state.hoveringMarker = marker;\n\n            this.dispatchEvent(new EnterMarkerEvent(marker));\n\n            if (!marker.state.staticTooltip && marker.config.tooltip?.trigger === 'hover') {\n                marker.showTooltip(e.clientX, e.clientY);\n            }\n        }\n    }\n\n    /**\n     * Handles mouse leave events, hide the tooltip\n     */\n    private __onMouseLeave(e: MouseEvent, marker: Marker) {\n        // do not hide if we enter the tooltip itself while hovering a polygon\n        if (marker && !(marker.isPoly() && this.__targetOnTooltip(e.relatedTarget as HTMLElement, marker.tooltip))) {\n            this.dispatchEvent(new LeaveMarkerEvent(marker));\n\n            this.state.hoveringMarker = null;\n\n            if (!marker.state.staticTooltip && marker.config.tooltip?.trigger === 'hover') {\n                marker.hideTooltip();\n            }\n        }\n    }\n\n    /**\n     * Handles mouse move events, refreshUi the tooltip for polygon markers\n     */\n    private __onMouseMove(e: MouseEvent, targetMarker?: Marker) {\n        let marker;\n\n        if (targetMarker?.isPoly()) {\n            marker = targetMarker;\n        }\n        // do not hide if we enter the tooltip itself while hovering a polygon\n        else if (\n            this.state.hoveringMarker\n            && this.__targetOnTooltip(e.target as HTMLElement, this.state.hoveringMarker.tooltip)\n        ) {\n            marker = this.state.hoveringMarker;\n        }\n\n        if (marker) {\n            if (!this.state.hoveringMarker) {\n                this.dispatchEvent(new EnterMarkerEvent(marker));\n\n                this.state.hoveringMarker = marker;\n            }\n\n            if (!marker.state.staticTooltip) {\n                marker.showTooltip(e.clientX, e.clientY);\n            }\n        } else if (this.state.hoveringMarker?.isPoly()) {\n            this.dispatchEvent(new LeaveMarkerEvent(this.state.hoveringMarker));\n\n            if (!this.state.hoveringMarker.state.staticTooltip) {\n                this.state.hoveringMarker.hideTooltip();\n            }\n\n            this.state.hoveringMarker = null;\n        }\n    }\n\n    /**\n     * Handles mouse click events, select the marker and open the panel if necessary\n     */\n    private __onClick(e: events.ClickEvent | events.DoubleClickEvent, dblclick: boolean) {\n        let marker = e.data.objects.find((o) => o.userData[MARKER_DATA])?.userData[MARKER_DATA];\n\n        if (!marker) {\n            marker = this.__getTargetMarker(e.data.target, true);\n        }\n\n        if (this.state.currentMarker && this.state.currentMarker !== marker) {\n            this.dispatchEvent(new UnselectMarkerEvent(this.state.currentMarker));\n\n            this.viewer.panel.hide(ID_PANEL_MARKER);\n\n            if (!this.state.showAllTooltips && this.state.currentMarker.config.tooltip?.trigger === 'click') {\n                this.hideMarkerTooltip(this.state.currentMarker.id);\n            }\n\n            this.state.currentMarker = null;\n        }\n\n        if (marker) {\n            this.state.currentMarker = marker;\n\n            this.dispatchEvent(new SelectMarkerEvent(marker, dblclick, e.data.rightclick));\n\n            if (this.config.clickEventOnMarker) {\n                // add the marker to event data\n                e.data.marker = marker;\n            } else {\n                e.stopImmediatePropagation();\n            }\n\n            // the marker could have been deleted in an event handler\n            if (this.markers[marker.id]) {\n                if (marker.config.tooltip?.trigger === 'click') {\n                    if (marker.tooltip) {\n                        this.hideMarkerTooltip(marker);\n                    } else {\n                        this.showMarkerTooltip(marker);\n                    }\n                } else {\n                    this.showMarkerPanel(marker.id);\n                }\n            }\n        }\n    }\n\n    private __afterChangerMarkers() {\n        this.__refreshUi();\n        this.__checkObjectsObserver();\n        this.viewer.needsUpdate();\n        this.dispatchEvent(new SetMarkersEvent(this.getMarkers()));\n    }\n\n    /**\n     * Updates the visiblity of the panel and the buttons\n     */\n    private __refreshUi() {\n        const nbMarkers = Object.values(this.markers).filter((m) => !m.config.hideList).length;\n\n        if (nbMarkers === 0) {\n            if (this.viewer.panel.isVisible(ID_PANEL_MARKERS_LIST) || this.viewer.panel.isVisible(ID_PANEL_MARKER)) {\n                this.viewer.panel.hide();\n            }\n        } else {\n            if (this.viewer.panel.isVisible(ID_PANEL_MARKERS_LIST)) {\n                this.showMarkersList();\n            } else if (this.viewer.panel.isVisible(ID_PANEL_MARKER)) {\n                this.state.currentMarker ? this.showMarkerPanel(this.state.currentMarker.id) : this.viewer.panel.hide();\n            }\n        }\n\n        this.viewer.navbar.getButton(MarkersButton.id, false)?.toggle(nbMarkers > 0);\n        this.viewer.navbar.getButton(MarkersListButton.id, false)?.toggle(nbMarkers > 0);\n    }\n\n    /**\n     * Adds or remove the objects observer if there are 3D markers\n     */\n    private __checkObjectsObserver() {\n        const has3d = Object.values(this.markers).some((marker) => marker.is3d());\n\n        if (has3d) {\n            this.viewer.observeObjects(MARKER_DATA);\n        } else {\n            this.viewer.unobserveObjects(MARKER_DATA);\n        }\n    }\n}\n","import type { Point, Position, Size, Tooltip, TooltipConfig, Viewer } from '@photo-sphere-viewer/core';\nimport { CONSTANTS, PSVError, utils } from '@photo-sphere-viewer/core';\nimport { Group, MathUtils, Mesh, MeshBasicMaterial, Object3D, PlaneGeometry, TextureLoader, Vector3 } from 'three';\nimport { MARKER_DATA, SVG_NS } from './constants';\nimport { MarkerConfig, ParsedMarkerConfig } from './model';\nimport { getPolygonCenter, getPolylineCenter } from './utils';\n\nexport enum MarkerType {\n    image = 'image',\n    imageLayer = 'imageLayer',\n    html = 'html',\n    polygon = 'polygon',\n    polygonPixels = 'polygonPixels',\n    polyline = 'polyline',\n    polylinePixels = 'polylinePixels',\n    square = 'square',\n    rect = 'rect',\n    circle = 'circle',\n    ellipse = 'ellipse',\n    path = 'path',\n}\n\nexport class Marker {\n    readonly type: MarkerType;\n    private readonly element: any;\n\n    /**\n     * The final description of the marker. Either text content, image, url, SVG attributes, etc.\n     */\n    definition: any;\n    visible = true;\n\n    /** @internal */\n    tooltip?: Tooltip;\n    private loader?: TextureLoader;\n\n    config: ParsedMarkerConfig;\n\n    get id(): string {\n        return this.config.id;\n    }\n\n    get data(): any {\n        return this.config.data;\n    }\n\n    get domElement(): HTMLElement | SVGElement {\n        return !this.is3d() ? this.element : null;\n    }\n\n    get threeElement(): Object3D {\n        return this.is3d() ? this.element : null;\n    }\n\n    /** @internal */\n    readonly state = {\n        dynamicSize: false,\n        anchor: null as Point,\n        visible: false,\n        staticTooltip: false,\n        position: null as Position,\n        position2D: null as Point,\n        positions3D: null as Vector3[],\n        size: null as Size,\n    };\n\n    constructor(private readonly viewer: Viewer, config: MarkerConfig) {\n        if (!config.id) {\n            throw new PSVError('missing marker id');\n        }\n\n        this.type = Marker.getType(config);\n\n        // create element\n        if (this.isNormal()) {\n            this.element = document.createElement('div');\n        } else if (this.isPolygon()) {\n            this.element = document.createElementNS(SVG_NS, 'polygon');\n        } else if (this.isPolyline()) {\n            this.element = document.createElementNS(SVG_NS, 'polyline');\n        } else if (this.isSvg()) {\n            const svgType = this.type === MarkerType.square ? 'rect' : this.type;\n            this.element = document.createElementNS(SVG_NS, svgType);\n        } else if (this.is3d()) {\n            this.element = this.__createMesh();\n            this.loader = new TextureLoader();\n            if (this.viewer.config.withCredentials) {\n                this.loader.setWithCredentials(true);\n            }\n        }\n\n        if (!this.is3d()) {\n            this.element.id = `psv-marker-${config.id}`;\n            this.element[MARKER_DATA] = this;\n        }\n\n        this.update(config);\n    }\n\n    /**\n     * @internal\n     */\n    destroy() {\n        this.hideTooltip();\n\n        if (this.is3d()) {\n            delete this.threeElement.children[0].userData[MARKER_DATA];\n        } else {\n            delete this.element[MARKER_DATA];\n        }\n    }\n\n    /**\n     * Checks if it is a 3D marker (imageLayer)\n     */\n    is3d(): boolean {\n        return this.type === MarkerType.imageLayer;\n    }\n\n    /**\n     * Checks if it is a normal marker (image or html)\n     */\n    isNormal(): boolean {\n        return this.type === MarkerType.image\n            || this.type === MarkerType.html;\n    }\n\n    /**\n     * Checks if it is a polygon/polyline marker\n     */\n    isPoly(): boolean {\n        return this.isPolygon()\n            || this.isPolyline();\n    }\n\n    /**\n     * Checks if it is a polygon/polyline using pixel coordinates\n     */\n    isPolyPixels(): boolean {\n        return this.type === MarkerType.polygonPixels\n            || this.type === MarkerType.polylinePixels;\n    }\n\n    /**\n     * Checks if it is a polygon/polyline using radian coordinates\n     */\n    isPolyAngles(): boolean {\n        return this.type === MarkerType.polygon\n            || this.type === MarkerType.polyline;\n    }\n\n    /**\n     * Checks if it is a polygon marker\n     */\n    isPolygon(): boolean {\n        return this.type === MarkerType.polygon\n            || this.type === MarkerType.polygonPixels;\n    }\n\n    /**\n     * Checks if it is a polyline marker\n     */\n    isPolyline(): boolean {\n        return this.type === MarkerType.polyline\n            || this.type === MarkerType.polylinePixels;\n    }\n\n    /**\n     * Checks if it is an SVG marker\n     */\n    isSvg(): boolean {\n        return this.type === MarkerType.square\n            || this.type === MarkerType.rect\n            || this.type === MarkerType.circle\n            || this.type === MarkerType.ellipse\n            || this.type === MarkerType.path;\n    }\n\n    /**\n     * Computes marker scale\n     * @internal\n     */\n    getScale(zoomLevel: number, position: Position): number {\n        if (!this.config.scale) {\n            return 1;\n        }\n        if (typeof this.config.scale === 'function') {\n            return this.config.scale(zoomLevel, position);\n        }\n\n        let scale = 1;\n        if (Array.isArray(this.config.scale.zoom)) {\n            const [min, max] = this.config.scale.zoom;\n            scale *= min + (max - min) * CONSTANTS.EASINGS.inQuad(zoomLevel / 100);\n        }\n        if (Array.isArray(this.config.scale.yaw)) {\n            const [min, max] = this.config.scale.yaw;\n            const halfFov = MathUtils.degToRad(this.viewer.state.hFov) / 2;\n            const arc = Math.abs(utils.getShortestArc(this.state.position.yaw, position.yaw));\n            scale *= max + (min - max) * CONSTANTS.EASINGS.outQuad(Math.max(0, (halfFov - arc) / halfFov));\n        }\n        return scale;\n    }\n\n    /**\n     * Returns the markers list content for the marker, it can be either :\n     * - the `listContent`\n     * - the `tooltip`\n     * - the `html`\n     * - the `id`\n     * @internal\n     */\n    getListContent(): string {\n        if (this.config.listContent) {\n            return this.config.listContent;\n        } else if (this.config.tooltip?.content) {\n            return this.config.tooltip.content;\n        } else if (this.config.html) {\n            return this.config.html;\n        } else {\n            return this.id;\n        }\n    }\n\n    /**\n     * Display the tooltip of this marker\n     * @internal\n     */\n    showTooltip(clientX?: number, clientY?: number) {\n        if (this.state.visible && this.config.tooltip?.content && this.state.position2D) {\n            const config: TooltipConfig = {\n                ...this.config.tooltip,\n                data: this,\n                top: 0,\n                left: 0,\n            };\n\n            if (this.isPoly()) {\n                if (clientX || clientY) {\n                    const viewerPos = utils.getPosition(this.viewer.container);\n                    config.top = clientY - viewerPos.y;\n                    config.left = clientX - viewerPos.x;\n                    config.box = {\n                        // separate the tooltip from the cursor\n                        width: 20,\n                        height: 20,\n                    };\n                } else {\n                    config.top = this.state.position2D.y;\n                    config.left = this.state.position2D.x;\n                }\n            } else {\n                config.top = this.state.position2D.y + this.state.size.height / 2;\n                config.left = this.state.position2D.x + this.state.size.width / 2;\n                config.box = {\n                    width: this.state.size.width,\n                    height: this.state.size.height,\n                };\n            }\n\n            if (this.tooltip) {\n                this.tooltip.move(config);\n            } else {\n                this.tooltip = this.viewer.createTooltip(config);\n            }\n        }\n    }\n\n    /**\n     * Recompute the position of the tooltip\n     * @internal\n     */\n    refreshTooltip() {\n        if (this.tooltip) {\n            this.showTooltip();\n        }\n    }\n\n    /**\n     * Hides the tooltip of this marker\n     * @internal\n     */\n    hideTooltip() {\n        if (this.tooltip) {\n            this.tooltip.hide();\n            this.tooltip = null;\n        }\n    }\n\n    /**\n     * Updates the marker with new properties\n     * @throws {@link PSVError} if the configuration is invalid\n     * @internal\n     */\n    update(config: MarkerConfig) {\n        const newType = Marker.getType(config, true);\n\n        if (newType !== undefined && newType !== this.type) {\n            throw new PSVError('cannot change marker type');\n        }\n\n        if (utils.isExtendedPosition(config)) {\n            utils.logWarn('Use the \"position\" property to configure the position of a marker');\n            config.position = this.viewer.dataHelper.cleanPosition(config);\n        }\n\n        if ('width' in config && 'height' in config) {\n            utils.logWarn('Use the \"size\" property to configure the size of a marker');\n            // @ts-ignore\n            config.size = { width: config['width'], height: config['height'] };\n        }\n\n        this.config = utils.deepmerge(this.config, config as any);\n        if (typeof this.config.tooltip === 'string') {\n            this.config.tooltip = { content: this.config.tooltip };\n        }\n        if (this.config.tooltip && !this.config.tooltip.trigger) {\n            this.config.tooltip.trigger = 'hover';\n        }\n        if (this.config.scale && Array.isArray(this.config.scale)) {\n            this.config.scale = { zoom: this.config.scale as any };\n        }\n\n        this.visible = this.config.visible !== false;\n\n        this.state.anchor = utils.parsePoint(this.config.anchor);\n\n        if (!this.is3d()) {\n            const element = this.domElement;\n\n            // reset CSS class\n            if (this.isNormal()) {\n                element.setAttribute('class', 'psv-marker psv-marker--normal');\n            } else {\n                element.setAttribute('class', 'psv-marker psv-marker--svg');\n            }\n\n            // add CSS classes\n            if (this.config.className) {\n                utils.addClasses(element, this.config.className);\n            }\n\n            if (this.config.tooltip) {\n                element.classList.add('psv-marker--has-tooltip');\n            }\n            if (this.config.content) {\n                element.classList.add('psv-marker--has-content');\n            }\n\n            // apply style\n            element.style.opacity = `${this.config.opacity ?? 1}`;\n            if (this.config.style) {\n                Object.assign(element.style, this.config.style);\n            }\n        }\n\n        if (this.isNormal()) {\n            this.__updateNormal();\n        } else if (this.isPoly()) {\n            this.__updatePoly();\n        } else if (this.isSvg()) {\n            this.__updateSvg();\n        } else if (this.is3d()) {\n            this.__update3d();\n        }\n    }\n\n    /**\n     * Updates a normal marker\n     */\n    private __updateNormal() {\n        const element = this.domElement;\n\n        if (!utils.isExtendedPosition(this.config.position)) {\n            throw new PSVError('missing marker position');\n        }\n        if (this.config.image && !this.config.size) {\n            throw new PSVError('missing marker size');\n        }\n\n        if (this.config.size) {\n            this.state.dynamicSize = false;\n            this.state.size = this.config.size;\n            element.style.width = this.config.size.width + 'px';\n            element.style.height = this.config.size.height + 'px';\n        } else {\n            this.state.dynamicSize = true;\n        }\n\n        if (this.config.image) {\n            this.definition = this.config.image;\n            element.style.backgroundImage = `url(${this.config.image})`;\n        } else if (this.config.html) {\n            this.definition = this.config.html;\n            element.innerHTML = this.config.html;\n        }\n\n        // set anchor\n        element.style.transformOrigin = `${this.state.anchor.x * 100}% ${this.state.anchor.y * 100}%`;\n\n        // convert texture coordinates to spherical coordinates\n        this.state.position = this.viewer.dataHelper.cleanPosition(this.config.position);\n\n        // compute x/y/z position\n        this.state.positions3D = [this.viewer.dataHelper.sphericalCoordsToVector3(this.state.position)];\n    }\n\n    /**\n     * Updates an SVG marker\n     */\n    private __updateSvg() {\n        const element = this.domElement;\n\n        if (!utils.isExtendedPosition(this.config.position)) {\n            throw new PSVError('missing marker position');\n        }\n\n        this.state.dynamicSize = true;\n\n        // set content\n        switch (this.type) {\n            case MarkerType.square:\n                this.definition = {\n                    x: 0,\n                    y: 0,\n                    width: this.config.square,\n                    height: this.config.square,\n                };\n                break;\n\n            case MarkerType.rect:\n                if (Array.isArray(this.config.rect)) {\n                    this.definition = {\n                        x: 0,\n                        y: 0,\n                        width: this.config.rect[0],\n                        height: this.config.rect[1],\n                    };\n                } else {\n                    this.definition = {\n                        x: 0,\n                        y: 0,\n                        width: this.config.rect.width,\n                        height: this.config.rect.height,\n                    };\n                }\n                break;\n\n            case MarkerType.circle:\n                this.definition = {\n                    cx: this.config.circle,\n                    cy: this.config.circle,\n                    r: this.config.circle,\n                };\n                break;\n\n            case MarkerType.ellipse:\n                if (Array.isArray(this.config.ellipse)) {\n                    this.definition = {\n                        cx: this.config.ellipse[0],\n                        cy: this.config.ellipse[1],\n                        rx: this.config.ellipse[0],\n                        ry: this.config.ellipse[1],\n                    };\n                } else {\n                    this.definition = {\n                        cx: this.config.ellipse.rx,\n                        cy: this.config.ellipse.ry,\n                        rx: this.config.ellipse.rx,\n                        ry: this.config.ellipse.ry,\n                    };\n                }\n                break;\n\n            case MarkerType.path:\n                this.definition = {\n                    d: this.config.path,\n                };\n                break;\n\n            // no default\n        }\n\n        Object.entries(this.definition).forEach(([prop, value]) => {\n            element.setAttributeNS(null, prop, value as string);\n        });\n\n        // set style\n        if (this.config.svgStyle) {\n            Object.entries(this.config.svgStyle).forEach(([prop, value]) => {\n                element.setAttributeNS(null, utils.dasherize(prop), value);\n            });\n        } else {\n            element.setAttributeNS(null, 'fill', 'rgba(0,0,0,0.5)');\n        }\n\n        // convert texture coordinates to spherical coordinates\n        this.state.position = this.viewer.dataHelper.cleanPosition(this.config.position);\n\n        // compute x/y/z position\n        this.state.positions3D = [this.viewer.dataHelper.sphericalCoordsToVector3(this.state.position)];\n    }\n\n    /**\n     * Updates a polygon marker\n     */\n    private __updatePoly() {\n        const element = this.domElement;\n\n        this.state.dynamicSize = true;\n\n        // set style\n        if (this.config.svgStyle) {\n            Object.entries(this.config.svgStyle).forEach(([prop, value]) => {\n                element.setAttributeNS(null, utils.dasherize(prop), value);\n            });\n\n            if (this.isPolyline() && !this.config.svgStyle.fill) {\n                element.setAttributeNS(null, 'fill', 'none');\n            }\n        } else if (this.isPolygon()) {\n            element.setAttributeNS(null, 'fill', 'rgba(0,0,0,0.5)');\n        } else if (this.isPolyline()) {\n            element.setAttributeNS(null, 'fill', 'none');\n            element.setAttributeNS(null, 'stroke', 'rgb(0,0,0)');\n        }\n\n        // fold arrays: [1,2,3,4] => [[1,2],[3,4]]\n        const actualPoly: any = this.config[this.type];\n        if (!Array.isArray(actualPoly[0])) {\n            for (let i = 0; i < actualPoly.length; i++) {\n                // @ts-ignore\n                actualPoly.splice(i, 2, [actualPoly[i], actualPoly[i + 1]]);\n            }\n        }\n\n        // convert texture coordinates to spherical coordinates\n        if (this.isPolyPixels()) {\n            this.definition = (actualPoly as [number, number][]).map((coord) => {\n                const sphericalCoords = this.viewer.dataHelper.textureCoordsToSphericalCoords({\n                    textureX: coord[0],\n                    textureY: coord[1],\n                });\n                return [sphericalCoords.yaw, sphericalCoords.pitch];\n            });\n        }\n        // clean angles\n        else {\n            this.definition = (actualPoly as [number | string, number | string][]).map((coord) => {\n                return [utils.parseAngle(coord[0]), utils.parseAngle(coord[1], true)];\n            });\n        }\n\n        const centroid = this.isPolygon() ? getPolygonCenter(this.definition) : getPolylineCenter(this.definition);\n\n        this.state.position = {\n            yaw: centroid[0],\n            pitch: centroid[1],\n        };\n\n        // compute x/y/z positions\n        this.state.positions3D = (this.definition as [number, number][]).map((coord) => {\n            return this.viewer.dataHelper.sphericalCoordsToVector3({ yaw: coord[0], pitch: coord[1] });\n        });\n    }\n\n    /**\n     * Updates a 3D marker\n     */\n    private __update3d() {\n        const element = this.threeElement;\n\n        if (!utils.isExtendedPosition(this.config.position)) {\n            throw new PSVError('missing marker position');\n        }\n        if (!this.config.size) {\n            throw new PSVError('missing marker size');\n        }\n\n        this.state.dynamicSize = false;\n        this.state.size = this.config.size;\n\n        // convert texture coordinates to spherical coordinates\n        this.state.position = this.viewer.dataHelper.cleanPosition(this.config.position);\n\n        // compute x/y/z position\n        this.state.positions3D = [this.viewer.dataHelper.sphericalCoordsToVector3(this.state.position)];\n\n        switch (this.type) {\n            case MarkerType.imageLayer:\n                if (this.definition !== this.config.imageLayer) {\n                    if (this.viewer.config.requestHeaders) {\n                        this.loader.setRequestHeader(this.viewer.config.requestHeaders(this.config.imageLayer));\n                    }\n                    (element.children[0] as Mesh<any, MeshBasicMaterial>).material.map = this.loader.load(\n                        this.config.imageLayer,\n                        (texture) => {\n                            texture.anisotropy = 4;\n                            this.viewer.needsUpdate();\n                        }\n                    );\n                    this.definition = this.config.imageLayer;\n                }\n\n                (element.children[0] as Mesh).position.set(this.state.anchor.x - 0.5, this.state.anchor.y - 0.5, 0);\n\n                (element.children[0] as Mesh<any, MeshBasicMaterial>).material.opacity = this.config.opacity ?? 1;\n\n                element.position.copy(this.state.positions3D[0]);\n\n                switch (this.config.orientation) {\n                    case 'horizontal':\n                        element.lookAt(0, element.position.y, 0);\n                        element.rotateX(this.state.position.pitch < 0 ? -Math.PI / 2 : Math.PI / 2);\n                        break;\n                    case 'vertical-left':\n                        element.lookAt(0, 0, 0);\n                        element.rotateY(-Math.PI * 0.4);\n                        break;\n                    case 'vertical-right':\n                        element.lookAt(0, 0, 0);\n                        element.rotateY(Math.PI * 0.4);\n                        break;\n                    default:\n                        element.lookAt(0, 0, 0);\n                        break;\n                }\n\n                // 100 is magic number that gives a coherent size at default zoom level\n                element.scale.set(this.config.size.width / 100, this.config.size.height / 100, 1);\n                break;\n\n            // no default\n        }\n    }\n\n    private __createMesh() {\n        const material = new MeshBasicMaterial({\n            transparent: true,\n            opacity: 1,\n            depthTest: false,\n        });\n        const geometry = new PlaneGeometry(1, 1);\n        const mesh = new Mesh(geometry, material);\n        mesh.userData = { [MARKER_DATA]: this };\n        const element = new Group().add(mesh);\n\n        // overwrite the visible property to be tied to the Marker instance\n        // and do it without context bleed\n        Object.defineProperty(element, 'visible', {\n            enumerable: true,\n            get: function (this: Object3D) {\n                return (this.children[0].userData[MARKER_DATA] as Marker).visible;\n            },\n            set: function (this: Object3D, visible: boolean) {\n                (this.children[0].userData[MARKER_DATA] as Marker).visible = visible;\n            },\n        });\n\n        return element;\n    }\n\n    /**\n     * Determines the type of a marker by the available properties\n     * @throws {@link PSVError} when the marker's type cannot be found\n     */\n    static getType(config: MarkerConfig, allowNone = false): MarkerType {\n        const found: MarkerType[] = [];\n\n        Object.keys(MarkerType).forEach((type) => {\n            if ((config as any)[type]) {\n                found.push(type as MarkerType);\n            }\n        });\n\n        if (found.length === 0 && !allowNone) {\n            throw new PSVError(`missing marker content, either ${Object.keys(MarkerType).join(', ')}`);\n        } else if (found.length > 1) {\n            throw new PSVError(`multiple marker content, either ${Object.keys(MarkerType).join(', ')}`);\n        }\n\n        return found[0];\n    }\n}\n","import { CONSTANTS, utils } from '@photo-sphere-viewer/core';\n\n/**\n * Returns intermediary point between two points on the sphere\n * {@link http://www.movable-type.co.uk/scripts/latlong.html}\n * @internal\n */\nexport function greatArcIntermediaryPoint(p1: [number, number], p2: [number, number], f: number): [number, number] {\n    const [λ1, φ1] = p1;\n    const [λ2, φ2] = p2;\n\n    const r = utils.greatArcDistance(p1, p2);\n    const a = Math.sin((1 - f) * r) / Math.sin(r);\n    const b = Math.sin(f * r) / Math.sin(r);\n    const x = a * Math.cos(φ1) * Math.cos(λ1) + b * Math.cos(φ2) * Math.cos(λ2);\n    const y = a * Math.cos(φ1) * Math.sin(λ1) + b * Math.cos(φ2) * Math.sin(λ2);\n    const z = a * Math.sin(φ1) + b * Math.sin(φ2);\n\n    return [Math.atan2(y, x), Math.atan2(z, Math.sqrt(x * x + y * y))];\n}\n\n/**\n * Given a list of spherical points, offsets yaws in order to have only coutinuous values\n * eg: [0.2, 6.08] is transformed to [0.2, -0.2]\n */\nfunction getPolygonCoherentPoints(points: [number, number][]) {\n    const workPoints = [points[0]];\n\n    let k = 0;\n    for (let i = 1; i < points.length; i++) {\n        const d = points[i - 1][0] - points[i][0];\n        if (d > Math.PI) {\n            // crossed the origin left to right\n            k += 1;\n        } else if (d < -Math.PI) {\n            // crossed the origin right to left\n            k -= 1;\n        }\n        workPoints.push([points[i][0] + k * 2 * Math.PI, points[i][1]]);\n    }\n\n    return workPoints;\n}\n\n/**\n * Computes the center point of a polygon\n * @todo Get \"visual center\" (https://blog.mapbox.com/a-new-algorithm-for-finding-a-visual-center-of-a-polygon-7c77e6492fbc)\n * @internal\n */\nexport function getPolygonCenter(polygon: [number, number][]): [number, number] {\n    const points = getPolygonCoherentPoints(polygon);\n\n    const sum = points.reduce((intermediary, point) => [intermediary[0] + point[0], intermediary[1] + point[1]]);\n    return [utils.parseAngle(sum[0] / polygon.length), sum[1] / polygon.length];\n}\n\n/**\n * Computes the middle point of a polyline\n * @internal\n */\nexport function getPolylineCenter(polyline: [number, number][]): [number, number] {\n    const points = getPolygonCoherentPoints(polyline);\n\n    // compute each segment length + total length\n    let length = 0;\n    const lengths = [];\n\n    for (let i = 0; i < points.length - 1; i++) {\n        const l = utils.greatArcDistance(points[i], points[i + 1]) * CONSTANTS.SPHERE_RADIUS;\n\n        lengths.push(l);\n        length += l;\n    }\n\n    // iterate until length / 2\n    let consumed = 0;\n\n    for (let j = 0; j < points.length - 1; j++) {\n        // once the segment containing the middle point is found, computes the intermediary point\n        if (consumed + lengths[j] > length / 2) {\n            const r = (length / 2 - consumed) / lengths[j];\n            return greatArcIntermediaryPoint(points[j], points[j + 1], r);\n        }\n\n        consumed += lengths[j];\n    }\n\n    // this never happens\n    return points[Math.round(points.length / 2)];\n}\n"],"mappings":"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","names":["AbstractButton","AbstractButton","CONSTANTS","events","PSVError","utils","Vector3","CONSTANTS","utils","utils","MarkerType","CONSTANTS","utils","utils","events","PSVError","Vector3","CONSTANTS"]}