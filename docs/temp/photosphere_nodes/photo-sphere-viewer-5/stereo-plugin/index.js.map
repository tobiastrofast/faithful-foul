{"version":3,"sources":["@photo-sphere-viewer/core","three","src/index.ts","src/events.ts","src/StereoButton.ts","src/StereoPlugin.ts","../../../node_modules/three/examples/jsm/effects/StereoEffect.js"],"sourcesContent":["module.exports = PhotoSphereViewer","module.exports = THREE","import { DEFAULTS, registerButton } from '@photo-sphere-viewer/core';\nimport * as events from './events';\nimport { StereoButton } from './StereoButton';\n\nDEFAULTS.lang[StereoButton.id] = 'Stereo view';\nregisterButton(StereoButton, 'caption:right');\n\nDEFAULTS.lang.stereoNotification = 'Tap anywhere to exit stereo view.';\nDEFAULTS.lang.pleaseRotate = 'Please rotate your device';\nDEFAULTS.lang.tapToContinue = '(or tap to continue)';\n\nexport { StereoPlugin } from './StereoPlugin';\nexport { events };\n","import { TypedEvent } from '@photo-sphere-viewer/core';\nimport type { StereoPlugin } from './StereoPlugin';\n\n/**\n * Triggered when the stereo view is enabled/disabled\n */\nexport class StereoUpdatedEvent extends TypedEvent<StereoPlugin> {\n    static override readonly type = 'stereo-updated';\n    override type: 'stereo-updated';\n\n    constructor(public readonly stereoEnabled: boolean) {\n        super(StereoUpdatedEvent.type);\n    }\n}\n\nexport type StereoPluginEvents = StereoUpdatedEvent;\n","import type { Navbar } from '@photo-sphere-viewer/core';\nimport { AbstractButton } from '@photo-sphere-viewer/core';\nimport { StereoUpdatedEvent } from './events';\nimport stereo from './icons/stereo.svg';\nimport type { StereoPlugin } from './StereoPlugin';\n\nexport class StereoButton extends AbstractButton {\n    static override readonly id = 'stereo';\n\n    private readonly plugin: StereoPlugin;\n\n    constructor(navbar: Navbar) {\n        super(navbar, {\n            className: 'psv-stereo-button',\n            icon: stereo,\n            hoverScale: true,\n            collapsable: true,\n            tabbable: true,\n        });\n\n        this.plugin = this.viewer.getPlugin('stereo');\n\n        if (this.plugin) {\n            this.plugin.addEventListener(StereoUpdatedEvent.type, this);\n        }\n    }\n\n    override destroy() {\n        if (this.plugin) {\n            this.plugin.removeEventListener(StereoUpdatedEvent.type, this);\n        }\n\n        super.destroy();\n    }\n\n    override isSupported() {\n        return !this.plugin ? false : { initial: false, promise: this.plugin.isSupported };\n    }\n\n    handleEvent(e: Event) {\n        if (e instanceof StereoUpdatedEvent) {\n            this.toggleActive(e.stereoEnabled);\n        }\n    }\n\n    /**\n     * Toggles stereo control\n     */\n    onClick() {\n        this.plugin.toggle();\n    }\n}\n","import type { CompassPlugin } from '@photo-sphere-viewer/compass-plugin';\nimport type { Viewer } from '@photo-sphere-viewer/core';\nimport { AbstractPlugin, events, PSVError, utils } from '@photo-sphere-viewer/core';\nimport type { GyroscopePlugin } from '@photo-sphere-viewer/gyroscope-plugin';\nimport type { MarkersPlugin } from '@photo-sphere-viewer/markers-plugin';\nimport { StereoEffect } from 'three/examples/jsm/effects/StereoEffect.js';\nimport { StereoPluginEvents, StereoUpdatedEvent } from './events';\nimport mobileRotateIcon from './icons/mobile-rotate.svg';\n\ninterface WakeLockSentinel {\n    release(): void;\n}\n\nconst ID_OVERLAY_PLEASE_ROTATE = 'pleaseRotate';\n\n/**\n * Adds stereo view on mobile devices\n */\nexport class StereoPlugin extends AbstractPlugin<StereoPluginEvents> {\n    static override readonly id = 'stereo';\n\n    private readonly state = {\n        enabled: false,\n        wakeLock: null as WakeLockSentinel,\n    };\n\n    private gyroscope: GyroscopePlugin;\n    private markers: MarkersPlugin;\n    private compass: CompassPlugin;\n\n    /**\n     * @internal\n     */\n    get isSupported(): Promise<boolean> {\n        return this.gyroscope.isSupported();\n    }\n\n    constructor(viewer: Viewer) {\n        super(viewer);\n    }\n\n    /**\n     * @internal\n     */\n    override init() {\n        super.init();\n\n        this.markers = this.viewer.getPlugin('markers');\n        this.compass = this.viewer.getPlugin('compass');\n        this.gyroscope = this.viewer.getPlugin('gyroscope');\n\n        if (!this.gyroscope) {\n            throw new PSVError('Stereo plugin requires the Gyroscope plugin');\n        }\n\n        this.viewer.addEventListener(events.StopAllEvent.type, this);\n        this.viewer.addEventListener(events.ClickEvent.type, this);\n    }\n\n    /**\n     * @internal\n     */\n    override destroy() {\n        this.viewer.removeEventListener(events.StopAllEvent.type, this);\n        this.viewer.removeEventListener(events.ClickEvent.type, this);\n\n        this.stop();\n\n        delete this.markers;\n        delete this.compass;\n        delete this.gyroscope;\n\n        super.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        if (e instanceof events.StopAllEvent || e instanceof events.ClickEvent) {\n            this.stop();\n        }\n    }\n\n    /**\n     * Checks if the stereo view is enabled\n     */\n    isEnabled(): boolean {\n        return this.state.enabled;\n    }\n\n    /**\n     * Enables the stereo view\n     * @description\n     *  - enables wake lock\n     *  - enables full screen\n     *  - starts gyroscope controle\n     *  - hides markers, navbar and panel\n     *  - instanciate the stereo effect\n     */\n    start(): Promise<void> {\n        // Need to be in the main event queue\n        this.viewer.enterFullscreen();\n        this.__startWakelock();\n        this.__lockOrientation();\n\n        return this.gyroscope.start('fast').then(\n            () => {\n                this.viewer.renderer.setCustomRenderer((renderer) => new StereoEffect(renderer));\n                this.state.enabled = true;\n\n                this.markers?.hideAllMarkers();\n                this.compass?.hide();\n                this.viewer.navbar.hide();\n                this.viewer.panel.hide();\n\n                this.dispatchEvent(new StereoUpdatedEvent(true));\n\n                this.viewer.notification.show({\n                    content: this.viewer.config.lang.stereoNotification,\n                    timeout: 3000,\n                });\n            },\n            () => {\n                this.__unlockOrientation();\n                this.__stopWakelock();\n                this.viewer.exitFullscreen();\n                return Promise.reject();\n            }\n        );\n    }\n\n    /**\n     * Disables the stereo view\n     */\n    stop() {\n        if (this.isEnabled()) {\n            this.viewer.renderer.setCustomRenderer(null);\n            this.state.enabled = false;\n\n            this.markers?.showAllMarkers();\n            this.compass?.show();\n            this.viewer.navbar.show();\n\n            this.__unlockOrientation();\n            this.__stopWakelock();\n            this.viewer.exitFullscreen();\n            this.gyroscope.stop();\n\n            this.dispatchEvent(new StereoUpdatedEvent(false));\n        }\n    }\n\n    /**\n     * Enables or disables the stereo view\n     */\n    toggle() {\n        if (this.isEnabled()) {\n            this.stop();\n        } else {\n            this.start();\n        }\n    }\n\n    /**\n     * Enables WakeLock\n     */\n    private __startWakelock() {\n        if ('wakeLock' in navigator) {\n            (navigator as any).wakeLock\n                .request('screen')\n                .then((wakeLock: WakeLockSentinel) => {\n                    this.state.wakeLock = wakeLock;\n                })\n                .catch(() => utils.logWarn('Cannot acquire WakeLock'));\n        } else {\n            utils.logWarn('WakeLock is not available');\n        }\n    }\n\n    /**\n     * Disables WakeLock\n     */\n    private __stopWakelock() {\n        if (this.state.wakeLock) {\n            this.state.wakeLock.release();\n            this.state.wakeLock = null;\n        }\n    }\n\n    /**\n     * Tries to lock the device in landscape or display a message\n     */\n    private __lockOrientation() {\n        let displayRotateMessageTimeout: ReturnType<typeof setTimeout>;\n\n        const displayRotateMessage = () => {\n            if (window.innerHeight > window.innerWidth) {\n                this.viewer.overlay.show({\n                    id: ID_OVERLAY_PLEASE_ROTATE,\n                    image: mobileRotateIcon,\n                    title: this.viewer.config.lang.pleaseRotate,\n                    text: this.viewer.config.lang.tapToContinue,\n                });\n            }\n\n            if (displayRotateMessageTimeout) {\n                clearTimeout(displayRotateMessageTimeout);\n                displayRotateMessageTimeout = null;\n            }\n        };\n\n        if (window.screen?.orientation) {\n            window.screen.orientation.lock('landscape').then(null, () => displayRotateMessage());\n            displayRotateMessageTimeout = setTimeout(() => displayRotateMessage(), 500);\n        } else {\n            displayRotateMessage();\n        }\n    }\n\n    /**\n     * Unlock the device orientation\n     */\n    private __unlockOrientation() {\n        if (window.screen?.orientation) {\n            window.screen.orientation.unlock();\n        } else {\n            this.viewer.overlay.hide(ID_OVERLAY_PLEASE_ROTATE);\n        }\n    }\n}\n","import {\n\tStereoCamera,\n\tVector2\n} from 'three';\n\nclass StereoEffect {\n\n\tconstructor( renderer ) {\n\n\t\tconst _stereo = new StereoCamera();\n\t\t_stereo.aspect = 0.5;\n\t\tconst size = new Vector2();\n\n\t\tthis.setEyeSeparation = function ( eyeSep ) {\n\n\t\t\t_stereo.eyeSep = eyeSep;\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height ) {\n\n\t\t\trenderer.setSize( width, height );\n\n\t\t};\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\t\t_stereo.update( camera );\n\n\t\t\trenderer.getSize( size );\n\n\t\t\tif ( renderer.autoClear ) renderer.clear();\n\t\t\trenderer.setScissorTest( true );\n\n\t\t\trenderer.setScissor( 0, 0, size.width / 2, size.height );\n\t\t\trenderer.setViewport( 0, 0, size.width / 2, size.height );\n\t\t\trenderer.render( scene, _stereo.cameraL );\n\n\t\t\trenderer.setScissor( size.width / 2, 0, size.width / 2, size.height );\n\t\t\trenderer.setViewport( size.width / 2, 0, size.width / 2, size.height );\n\t\t\trenderer.render( scene, _stereo.cameraR );\n\n\t\t\trenderer.setScissorTest( false );\n\n\t\t};\n\n\t}\n\n}\n\nexport { StereoEffect };\n"],"mappings":"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","names":["import_core","import_core","import_core"]}